-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matMul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    out_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    out_stream_TVALID : OUT STD_LOGIC;
    out_stream_TREADY : IN STD_LOGIC;
    out_stream_TKEEP : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    out_stream_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of matMul is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matMul_matMul,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.114000,HLS_SYN_LAT=2139,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2731,HLS_SYN_LUT=1691,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln18_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln25_fu_1129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal out_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal icmp_ln42_reg_1655 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal icmp_ln42_reg_1655_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_949 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_2_reg_961 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_reg_972 : STD_LOGIC_VECTOR (4 downto 0);
    signal res_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_995 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln17_fu_1019_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln17_reg_1381 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln21_fu_1031_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln21_reg_1389 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln17_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_1035_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_reg_1393 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state3 : BOOLEAN;
    signal add_ln24_fu_1087_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln24_reg_1401 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln24_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln28_fu_1099_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln28_reg_1410 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln25_fu_1103_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln25_reg_1414 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_state6 : BOOLEAN;
    signal icmp_ln32_fu_1155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln32_reg_1422 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln32_reg_1422_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_1161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1426 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_1426_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln32_fu_1197_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_1431 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln32_reg_1431_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln32_3_fu_1217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln32_3_reg_1436 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal trunc_ln32_2_fu_1225_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln32_2_reg_1441 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln36_fu_1249_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln36_reg_1606 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln34_fu_1253_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln34_reg_1611 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln34_1_fu_1259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_reg_1616 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_1_reg_1616_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_1265_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_1620 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state9_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_1_fu_1302_p18 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1625 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln32_fu_1339_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln32_reg_1630 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state11_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_1011_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1635 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1006_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal add_ln42_fu_1353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state18_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state19_io : BOOLEAN;
    signal ap_block_state20_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state20_io : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln42_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal valOut_last_V_reg_1664 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_flush_enable : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter1_state12 : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state18 : STD_LOGIC;
    signal A_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_0_ce0 : STD_LOGIC;
    signal A_0_we0 : STD_LOGIC;
    signal A_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_1_ce0 : STD_LOGIC;
    signal A_1_we0 : STD_LOGIC;
    signal A_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_2_ce0 : STD_LOGIC;
    signal A_2_we0 : STD_LOGIC;
    signal A_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_3_ce0 : STD_LOGIC;
    signal A_3_we0 : STD_LOGIC;
    signal A_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_4_ce0 : STD_LOGIC;
    signal A_4_we0 : STD_LOGIC;
    signal A_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_5_ce0 : STD_LOGIC;
    signal A_5_we0 : STD_LOGIC;
    signal A_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_6_ce0 : STD_LOGIC;
    signal A_6_we0 : STD_LOGIC;
    signal A_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_7_ce0 : STD_LOGIC;
    signal A_7_we0 : STD_LOGIC;
    signal A_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_8_ce0 : STD_LOGIC;
    signal A_8_we0 : STD_LOGIC;
    signal A_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_9_ce0 : STD_LOGIC;
    signal A_9_we0 : STD_LOGIC;
    signal A_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_10_ce0 : STD_LOGIC;
    signal A_10_we0 : STD_LOGIC;
    signal A_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_11_ce0 : STD_LOGIC;
    signal A_11_we0 : STD_LOGIC;
    signal A_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_12_ce0 : STD_LOGIC;
    signal A_12_we0 : STD_LOGIC;
    signal A_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_13_ce0 : STD_LOGIC;
    signal A_13_we0 : STD_LOGIC;
    signal A_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_14_ce0 : STD_LOGIC;
    signal A_14_we0 : STD_LOGIC;
    signal A_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal A_15_ce0 : STD_LOGIC;
    signal A_15_we0 : STD_LOGIC;
    signal A_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_0_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_0_ce0 : STD_LOGIC;
    signal B_0_we0 : STD_LOGIC;
    signal B_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_1_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_1_ce0 : STD_LOGIC;
    signal B_1_we0 : STD_LOGIC;
    signal B_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_2_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_2_ce0 : STD_LOGIC;
    signal B_2_we0 : STD_LOGIC;
    signal B_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_3_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_3_ce0 : STD_LOGIC;
    signal B_3_we0 : STD_LOGIC;
    signal B_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_4_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_4_ce0 : STD_LOGIC;
    signal B_4_we0 : STD_LOGIC;
    signal B_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_5_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_5_ce0 : STD_LOGIC;
    signal B_5_we0 : STD_LOGIC;
    signal B_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_6_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_6_ce0 : STD_LOGIC;
    signal B_6_we0 : STD_LOGIC;
    signal B_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_7_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_7_ce0 : STD_LOGIC;
    signal B_7_we0 : STD_LOGIC;
    signal B_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_8_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_8_ce0 : STD_LOGIC;
    signal B_8_we0 : STD_LOGIC;
    signal B_8_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_9_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_9_ce0 : STD_LOGIC;
    signal B_9_we0 : STD_LOGIC;
    signal B_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_10_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_10_ce0 : STD_LOGIC;
    signal B_10_we0 : STD_LOGIC;
    signal B_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_11_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_11_ce0 : STD_LOGIC;
    signal B_11_we0 : STD_LOGIC;
    signal B_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_12_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_12_ce0 : STD_LOGIC;
    signal B_12_we0 : STD_LOGIC;
    signal B_12_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_13_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_13_ce0 : STD_LOGIC;
    signal B_13_we0 : STD_LOGIC;
    signal B_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_14_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_14_ce0 : STD_LOGIC;
    signal B_14_we0 : STD_LOGIC;
    signal B_14_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal B_15_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal B_15_ce0 : STD_LOGIC;
    signal B_15_we0 : STD_LOGIC;
    signal B_15_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mulOut_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mulOut_ce0 : STD_LOGIC;
    signal mulOut_we0 : STD_LOGIC;
    signal mulOut_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_905 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_916 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_1_reg_927 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_938 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_phi_mux_indvar_flatten_phi_fu_953_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_965_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_k_phi_fu_976_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln25_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_1229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln42_fu_1365_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0_01001 : BOOLEAN;
    signal bitcast_ln21_fu_1067_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_fu_1135_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1006_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal add_ln32_1_fu_1175_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln32_fu_1181_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln32_1_fu_1185_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_4_fu_1189_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln32_fu_1167_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal regslice_both_out_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal regslice_both_in_stream_V_data_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal in_stream_TVALID_int_regslice : STD_LOGIC;
    signal in_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in_stream_V_data_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TKEEP_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_keep_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TSTRB_int_regslice : STD_LOGIC_VECTOR (3 downto 0);
    signal regslice_both_in_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_strb_V_U_ack_in : STD_LOGIC;
    signal regslice_both_in_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal in_stream_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_both_in_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal regslice_both_in_stream_V_last_V_U_ack_in : STD_LOGIC;
    signal out_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal out_stream_TVALID_int_regslice : STD_LOGIC;
    signal out_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_stream_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_out_stream_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component matMul_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matMul_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matMul_mux_164_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        din6 : IN STD_LOGIC_VECTOR (31 downto 0);
        din7 : IN STD_LOGIC_VECTOR (31 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        din9 : IN STD_LOGIC_VECTOR (31 downto 0);
        din10 : IN STD_LOGIC_VECTOR (31 downto 0);
        din11 : IN STD_LOGIC_VECTOR (31 downto 0);
        din12 : IN STD_LOGIC_VECTOR (31 downto 0);
        din13 : IN STD_LOGIC_VECTOR (31 downto 0);
        din14 : IN STD_LOGIC_VECTOR (31 downto 0);
        din15 : IN STD_LOGIC_VECTOR (31 downto 0);
        din16 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matMul_A_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matMul_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    A_0_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_0_address0,
        ce0 => A_0_ce0,
        we0 => A_0_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_0_q0);

    A_1_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_1_address0,
        ce0 => A_1_ce0,
        we0 => A_1_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_1_q0);

    A_2_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_2_address0,
        ce0 => A_2_ce0,
        we0 => A_2_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_2_q0);

    A_3_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_3_address0,
        ce0 => A_3_ce0,
        we0 => A_3_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_3_q0);

    A_4_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_4_address0,
        ce0 => A_4_ce0,
        we0 => A_4_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_4_q0);

    A_5_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_5_address0,
        ce0 => A_5_ce0,
        we0 => A_5_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_5_q0);

    A_6_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_6_address0,
        ce0 => A_6_ce0,
        we0 => A_6_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_6_q0);

    A_7_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_7_address0,
        ce0 => A_7_ce0,
        we0 => A_7_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_7_q0);

    A_8_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_8_address0,
        ce0 => A_8_ce0,
        we0 => A_8_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_8_q0);

    A_9_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_9_address0,
        ce0 => A_9_ce0,
        we0 => A_9_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_9_q0);

    A_10_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_10_address0,
        ce0 => A_10_ce0,
        we0 => A_10_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_10_q0);

    A_11_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_11_address0,
        ce0 => A_11_ce0,
        we0 => A_11_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_11_q0);

    A_12_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_12_address0,
        ce0 => A_12_ce0,
        we0 => A_12_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_12_q0);

    A_13_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_13_address0,
        ce0 => A_13_ce0,
        we0 => A_13_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_13_q0);

    A_14_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_14_address0,
        ce0 => A_14_ce0,
        we0 => A_14_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_14_q0);

    A_15_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => A_15_address0,
        ce0 => A_15_ce0,
        we0 => A_15_we0,
        d0 => bitcast_ln21_fu_1067_p1,
        q0 => A_15_q0);

    B_0_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_0_address0,
        ce0 => B_0_ce0,
        we0 => B_0_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_0_q0);

    B_1_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_1_address0,
        ce0 => B_1_ce0,
        we0 => B_1_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_1_q0);

    B_2_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_2_address0,
        ce0 => B_2_ce0,
        we0 => B_2_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_2_q0);

    B_3_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_3_address0,
        ce0 => B_3_ce0,
        we0 => B_3_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_3_q0);

    B_4_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_4_address0,
        ce0 => B_4_ce0,
        we0 => B_4_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_4_q0);

    B_5_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_5_address0,
        ce0 => B_5_ce0,
        we0 => B_5_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_5_q0);

    B_6_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_6_address0,
        ce0 => B_6_ce0,
        we0 => B_6_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_6_q0);

    B_7_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_7_address0,
        ce0 => B_7_ce0,
        we0 => B_7_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_7_q0);

    B_8_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_8_address0,
        ce0 => B_8_ce0,
        we0 => B_8_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_8_q0);

    B_9_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_9_address0,
        ce0 => B_9_ce0,
        we0 => B_9_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_9_q0);

    B_10_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_10_address0,
        ce0 => B_10_ce0,
        we0 => B_10_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_10_q0);

    B_11_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_11_address0,
        ce0 => B_11_ce0,
        we0 => B_11_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_11_q0);

    B_12_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_12_address0,
        ce0 => B_12_ce0,
        we0 => B_12_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_12_q0);

    B_13_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_13_address0,
        ce0 => B_13_ce0,
        we0 => B_13_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_13_q0);

    B_14_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_14_address0,
        ce0 => B_14_ce0,
        we0 => B_14_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_14_q0);

    B_15_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => B_15_address0,
        ce0 => B_15_ce0,
        we0 => B_15_we0,
        d0 => bitcast_ln28_fu_1135_p1,
        q0 => B_15_q0);

    mulOut_U : component matMul_A_0
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => mulOut_address0,
        ce0 => mulOut_ce0,
        we0 => mulOut_we0,
        d0 => grp_fu_1006_p2,
        q0 => mulOut_q0);

    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component matMul_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_1006_p0,
        din1 => mul_reg_1635,
        ce => ap_const_logic_1,
        dout => grp_fu_1006_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U2 : component matMul_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => tmp_reg_1620,
        din1 => tmp_1_reg_1625,
        ce => ap_const_logic_1,
        dout => grp_fu_1011_p2);

    mux_164_32_1_1_U3 : component matMul_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => A_0_q0,
        din1 => A_1_q0,
        din2 => A_2_q0,
        din3 => A_3_q0,
        din4 => A_4_q0,
        din5 => A_5_q0,
        din6 => A_6_q0,
        din7 => A_7_q0,
        din8 => A_8_q0,
        din9 => A_9_q0,
        din10 => A_10_q0,
        din11 => A_11_q0,
        din12 => A_12_q0,
        din13 => A_13_q0,
        din14 => A_14_q0,
        din15 => A_15_q0,
        din16 => trunc_ln32_2_reg_1441,
        dout => tmp_fu_1265_p18);

    mux_164_32_1_1_U4 : component matMul_mux_164_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 32,
        din6_WIDTH => 32,
        din7_WIDTH => 32,
        din8_WIDTH => 32,
        din9_WIDTH => 32,
        din10_WIDTH => 32,
        din11_WIDTH => 32,
        din12_WIDTH => 32,
        din13_WIDTH => 32,
        din14_WIDTH => 32,
        din15_WIDTH => 32,
        din16_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => B_0_q0,
        din1 => B_1_q0,
        din2 => B_2_q0,
        din3 => B_3_q0,
        din4 => B_4_q0,
        din5 => B_5_q0,
        din6 => B_6_q0,
        din7 => B_7_q0,
        din8 => B_8_q0,
        din9 => B_9_q0,
        din10 => B_10_q0,
        din11 => B_11_q0,
        din12 => B_12_q0,
        din13 => B_13_q0,
        din14 => B_14_q0,
        din15 => B_15_q0,
        din16 => trunc_ln36_reg_1606,
        dout => tmp_1_fu_1302_p18);

    regslice_both_in_stream_V_data_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TDATA,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_data_V_U_ack_in,
        data_out => in_stream_TDATA_int_regslice,
        vld_out => in_stream_TVALID_int_regslice,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_data_V_U_apdone_blk);

    regslice_both_in_stream_V_keep_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TKEEP,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_keep_V_U_ack_in,
        data_out => in_stream_TKEEP_int_regslice,
        vld_out => regslice_both_in_stream_V_keep_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_keep_V_U_apdone_blk);

    regslice_both_in_stream_V_strb_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TSTRB,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_strb_V_U_ack_in,
        data_out => in_stream_TSTRB_int_regslice,
        vld_out => regslice_both_in_stream_V_strb_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_strb_V_U_apdone_blk);

    regslice_both_in_stream_V_last_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in_stream_TLAST,
        vld_in => in_stream_TVALID,
        ack_in => regslice_both_in_stream_V_last_V_U_ack_in,
        data_out => in_stream_TLAST_int_regslice,
        vld_out => regslice_both_in_stream_V_last_V_U_vld_out,
        ack_out => in_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_in_stream_V_last_V_U_apdone_blk);

    regslice_both_out_stream_V_data_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_stream_TDATA_int_regslice,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => out_stream_TREADY_int_regslice,
        data_out => out_stream_TDATA,
        vld_out => regslice_both_out_stream_V_data_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_data_V_U_apdone_blk);

    regslice_both_out_stream_V_keep_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_keep_V_U_ack_in_dummy,
        data_out => out_stream_TKEEP,
        vld_out => regslice_both_out_stream_V_keep_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_keep_V_U_apdone_blk);

    regslice_both_out_stream_V_strb_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 4)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv4_0,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_strb_V_U_ack_in_dummy,
        data_out => out_stream_TSTRB,
        vld_out => regslice_both_out_stream_V_strb_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_strb_V_U_apdone_blk);

    regslice_both_out_stream_V_last_V_U : component matMul_regslice_both
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => valOut_last_V_reg_1664,
        vld_in => out_stream_TVALID_int_regslice,
        ack_in => regslice_both_out_stream_V_last_V_U_ack_in_dummy,
        data_out => out_stream_TLAST,
        vld_out => regslice_both_out_stream_V_last_V_U_vld_out,
        ack_out => out_stream_TREADY,
        apdone_blk => regslice_both_out_stream_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_pp0_flush_enable)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter1_state12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter1_state12) and (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state18)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state18);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_927_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_1025_p2 = ap_const_lv1_1))) then 
                i_1_reg_927 <= ap_const_lv5_0;
            elsif ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_927 <= add_ln24_reg_1401;
            end if; 
        end if;
    end process;

    i_2_reg_961_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then 
                i_2_reg_961 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then 
                i_2_reg_961 <= select_ln32_3_reg_1436;
            end if; 
        end if;
    end process;

    i_3_reg_995_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_995 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln42_fu_1359_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_3_reg_995 <= add_ln42_fu_1353_p2;
            end if; 
        end if;
    end process;

    i_reg_905_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_905 <= ap_const_lv5_0;
            elsif ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_905 <= add_ln17_reg_1381;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_949_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then 
                indvar_flatten_reg_949 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then 
                indvar_flatten_reg_949 <= add_ln32_reg_1630;
            end if; 
        end if;
    end process;

    j_1_reg_938_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_0))) then 
                j_1_reg_938 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_1_reg_938 <= add_ln25_reg_1414;
            end if; 
        end if;
    end process;

    j_reg_916_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_1025_p2 = ap_const_lv1_0))) then 
                j_reg_916 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_916 <= add_ln18_reg_1393;
            end if; 
        end if;
    end process;

    k_reg_972_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then 
                k_reg_972 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then 
                k_reg_972 <= add_ln34_reg_1611;
            end if; 
        end if;
    end process;

    res_reg_983_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then 
                res_reg_983 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422_pp0_iter1_reg = ap_const_lv1_0))) then 
                res_reg_983 <= grp_fu_1006_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln17_reg_1381 <= add_ln17_fu_1019_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln18_reg_1393 <= add_ln18_fu_1035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                add_ln24_reg_1401 <= add_ln24_fu_1087_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                add_ln25_reg_1414 <= add_ln25_fu_1103_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln32_reg_1630 <= add_ln32_fu_1339_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln32_fu_1155_p2 = ap_const_lv1_0))) then
                add_ln34_reg_1611 <= add_ln34_fu_1253_p2;
                select_ln32_3_reg_1436 <= select_ln32_3_fu_1217_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln32_reg_1422 <= icmp_ln32_fu_1155_p2;
                icmp_ln32_reg_1422_pp0_iter1_reg <= icmp_ln32_reg_1422;
                icmp_ln34_1_reg_1616_pp0_iter1_reg <= icmp_ln34_1_reg_1616;
                icmp_ln34_reg_1426_pp0_iter1_reg <= icmp_ln34_reg_1426;
                    zext_ln32_reg_1431_pp0_iter1_reg(3 downto 0) <= zext_ln32_reg_1431(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_fu_1155_p2 = ap_const_lv1_0))) then
                icmp_ln34_1_reg_1616 <= icmp_ln34_1_fu_1259_p2;
                icmp_ln34_reg_1426 <= icmp_ln34_fu_1161_p2;
                trunc_ln32_2_reg_1441 <= trunc_ln32_2_fu_1225_p1;
                trunc_ln36_reg_1606 <= trunc_ln36_fu_1249_p1;
                    zext_ln32_reg_1431(3 downto 0) <= zext_ln32_fu_1197_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln42_reg_1655 <= icmp_ln42_fu_1359_p2;
                icmp_ln42_reg_1655_pp1_iter1_reg <= icmp_ln42_reg_1655;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then
                mul_reg_1635 <= grp_fu_1011_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then
                tmp_1_reg_1625 <= tmp_1_fu_1302_p18;
                tmp_reg_1620 <= tmp_fu_1265_p18;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_1025_p2 = ap_const_lv1_0))) then
                trunc_ln21_reg_1389 <= trunc_ln21_fu_1031_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_0))) then
                trunc_ln28_reg_1410 <= trunc_ln28_fu_1099_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln42_fu_1359_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                valOut_last_V_reg_1664 <= valOut_last_V_fu_1370_p2;
            end if;
        end if;
    end process;
    zext_ln32_reg_1431(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln32_reg_1431_pp0_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_CS_fsm_state2, icmp_ln17_fu_1025_p2, ap_CS_fsm_state5, icmp_ln24_fu_1093_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, icmp_ln42_fu_1359_p2, ap_block_pp0_stage3_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_CS_fsm_state21, regslice_both_out_stream_V_data_V_U_apdone_blk, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, in_stream_TVALID_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln17_fu_1025_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln24_fu_1093_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln42_fu_1359_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln42_fu_1359_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;

    A_0_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_0_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_0_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_0_address0 <= "XXXX";
        end if; 
    end process;


    A_0_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_0_ce0 <= ap_const_logic_1;
        else 
            A_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_0_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_0))) then 
            A_0_we0 <= ap_const_logic_1;
        else 
            A_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_10_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_10_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_10_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_10_address0 <= "XXXX";
        end if; 
    end process;


    A_10_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_10_ce0 <= ap_const_logic_1;
        else 
            A_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_10_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_A))) then 
            A_10_we0 <= ap_const_logic_1;
        else 
            A_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_11_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_11_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_11_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_11_address0 <= "XXXX";
        end if; 
    end process;


    A_11_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_11_ce0 <= ap_const_logic_1;
        else 
            A_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_11_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_B))) then 
            A_11_we0 <= ap_const_logic_1;
        else 
            A_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_12_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_12_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_12_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_12_address0 <= "XXXX";
        end if; 
    end process;


    A_12_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_12_ce0 <= ap_const_logic_1;
        else 
            A_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_12_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_C))) then 
            A_12_we0 <= ap_const_logic_1;
        else 
            A_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_13_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_13_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_13_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_13_address0 <= "XXXX";
        end if; 
    end process;


    A_13_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_13_ce0 <= ap_const_logic_1;
        else 
            A_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_13_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_D))) then 
            A_13_we0 <= ap_const_logic_1;
        else 
            A_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_14_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_14_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_14_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_14_address0 <= "XXXX";
        end if; 
    end process;


    A_14_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_14_ce0 <= ap_const_logic_1;
        else 
            A_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_14_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_E))) then 
            A_14_we0 <= ap_const_logic_1;
        else 
            A_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_15_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_15_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_15_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_15_address0 <= "XXXX";
        end if; 
    end process;


    A_15_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_15_ce0 <= ap_const_logic_1;
        else 
            A_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_15_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_F))) then 
            A_15_we0 <= ap_const_logic_1;
        else 
            A_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_1_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_1_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_1_address0 <= "XXXX";
        end if; 
    end process;


    A_1_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_1_ce0 <= ap_const_logic_1;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_1))) then 
            A_1_we0 <= ap_const_logic_1;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_2_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_2_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_2_address0 <= "XXXX";
        end if; 
    end process;


    A_2_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_2_ce0 <= ap_const_logic_1;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_2))) then 
            A_2_we0 <= ap_const_logic_1;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_3_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_3_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_3_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_3_address0 <= "XXXX";
        end if; 
    end process;


    A_3_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_3_ce0 <= ap_const_logic_1;
        else 
            A_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_3_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_3))) then 
            A_3_we0 <= ap_const_logic_1;
        else 
            A_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_4_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_4_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_4_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_4_address0 <= "XXXX";
        end if; 
    end process;


    A_4_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_4_ce0 <= ap_const_logic_1;
        else 
            A_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_4_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_4))) then 
            A_4_we0 <= ap_const_logic_1;
        else 
            A_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_5_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_5_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_5_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_5_address0 <= "XXXX";
        end if; 
    end process;


    A_5_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_5_ce0 <= ap_const_logic_1;
        else 
            A_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_5_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_5))) then 
            A_5_we0 <= ap_const_logic_1;
        else 
            A_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_6_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_6_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_6_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_6_address0 <= "XXXX";
        end if; 
    end process;


    A_6_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_6_ce0 <= ap_const_logic_1;
        else 
            A_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_6_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_6))) then 
            A_6_we0 <= ap_const_logic_1;
        else 
            A_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_7_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_7_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_7_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_7_address0 <= "XXXX";
        end if; 
    end process;


    A_7_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_7_ce0 <= ap_const_logic_1;
        else 
            A_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_7_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_7))) then 
            A_7_we0 <= ap_const_logic_1;
        else 
            A_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_8_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_8_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_8_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_8_address0 <= "XXXX";
        end if; 
    end process;


    A_8_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_8_ce0 <= ap_const_logic_1;
        else 
            A_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_8_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_8))) then 
            A_8_we0 <= ap_const_logic_1;
        else 
            A_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_9_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln18_fu_1041_p1, zext_ln34_fu_1229_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            A_9_address0 <= zext_ln34_fu_1229_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            A_9_address0 <= zext_ln18_fu_1041_p1(4 - 1 downto 0);
        else 
            A_9_address0 <= "XXXX";
        end if; 
    end process;


    A_9_ce0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_9_ce0 <= ap_const_logic_1;
        else 
            A_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_9_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, trunc_ln21_reg_1389, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3) and (trunc_ln21_reg_1389 = ap_const_lv4_9))) then 
            A_9_we0 <= ap_const_logic_1;
        else 
            A_9_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_0_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_0_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_0_address0 <= "XXXX";
        end if; 
    end process;


    B_0_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_0_ce0 <= ap_const_logic_1;
        else 
            B_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_0_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_0))) then 
            B_0_we0 <= ap_const_logic_1;
        else 
            B_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_10_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_10_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_10_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_10_address0 <= "XXXX";
        end if; 
    end process;


    B_10_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_10_ce0 <= ap_const_logic_1;
        else 
            B_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_10_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_A))) then 
            B_10_we0 <= ap_const_logic_1;
        else 
            B_10_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_11_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_11_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_11_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_11_address0 <= "XXXX";
        end if; 
    end process;


    B_11_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_11_ce0 <= ap_const_logic_1;
        else 
            B_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_11_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_B))) then 
            B_11_we0 <= ap_const_logic_1;
        else 
            B_11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_12_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_12_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_12_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_12_address0 <= "XXXX";
        end if; 
    end process;


    B_12_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_12_ce0 <= ap_const_logic_1;
        else 
            B_12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_12_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_C))) then 
            B_12_we0 <= ap_const_logic_1;
        else 
            B_12_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_13_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_13_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_13_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_13_address0 <= "XXXX";
        end if; 
    end process;


    B_13_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_13_ce0 <= ap_const_logic_1;
        else 
            B_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_13_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_D))) then 
            B_13_we0 <= ap_const_logic_1;
        else 
            B_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_14_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_14_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_14_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_14_address0 <= "XXXX";
        end if; 
    end process;


    B_14_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_14_ce0 <= ap_const_logic_1;
        else 
            B_14_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_14_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_E))) then 
            B_14_we0 <= ap_const_logic_1;
        else 
            B_14_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_15_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_15_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_15_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_15_address0 <= "XXXX";
        end if; 
    end process;


    B_15_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_15_ce0 <= ap_const_logic_1;
        else 
            B_15_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_15_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_F))) then 
            B_15_we0 <= ap_const_logic_1;
        else 
            B_15_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_1_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_1_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_1_address0 <= "XXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_1_ce0 <= ap_const_logic_1;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_1))) then 
            B_1_we0 <= ap_const_logic_1;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_2_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_2_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_2_address0 <= "XXXX";
        end if; 
    end process;


    B_2_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_2_ce0 <= ap_const_logic_1;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_2))) then 
            B_2_we0 <= ap_const_logic_1;
        else 
            B_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_3_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_3_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_3_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_3_address0 <= "XXXX";
        end if; 
    end process;


    B_3_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_3_ce0 <= ap_const_logic_1;
        else 
            B_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_3_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_3))) then 
            B_3_we0 <= ap_const_logic_1;
        else 
            B_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_4_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_4_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_4_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_4_address0 <= "XXXX";
        end if; 
    end process;


    B_4_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_4_ce0 <= ap_const_logic_1;
        else 
            B_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_4_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_4))) then 
            B_4_we0 <= ap_const_logic_1;
        else 
            B_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_5_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_5_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_5_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_5_address0 <= "XXXX";
        end if; 
    end process;


    B_5_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_5_ce0 <= ap_const_logic_1;
        else 
            B_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_5_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_5))) then 
            B_5_we0 <= ap_const_logic_1;
        else 
            B_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_6_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_6_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_6_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_6_address0 <= "XXXX";
        end if; 
    end process;


    B_6_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_6_ce0 <= ap_const_logic_1;
        else 
            B_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_6_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_6))) then 
            B_6_we0 <= ap_const_logic_1;
        else 
            B_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_7_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_7_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_7_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_7_address0 <= "XXXX";
        end if; 
    end process;


    B_7_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_7_ce0 <= ap_const_logic_1;
        else 
            B_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_7_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_7))) then 
            B_7_we0 <= ap_const_logic_1;
        else 
            B_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_8_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_8_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_8_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_8_address0 <= "XXXX";
        end if; 
    end process;


    B_8_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_8_ce0 <= ap_const_logic_1;
        else 
            B_8_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_8_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_8))) then 
            B_8_we0 <= ap_const_logic_1;
        else 
            B_8_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_9_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, zext_ln32_fu_1197_p1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln25_fu_1109_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            B_9_address0 <= zext_ln32_fu_1197_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            B_9_address0 <= zext_ln25_fu_1109_p1(4 - 1 downto 0);
        else 
            B_9_address0 <= "XXXX";
        end if; 
    end process;


    B_9_ce0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, in_stream_TVALID_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or (not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            B_9_ce0 <= ap_const_logic_1;
        else 
            B_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_9_we0_assign_proc : process(ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, trunc_ln28_reg_1410, in_stream_TVALID_int_regslice)
    begin
        if ((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln28_reg_1410 = ap_const_lv4_9))) then 
            B_9_we0 <= ap_const_logic_1;
        else 
            B_9_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln17_fu_1019_p2 <= std_logic_vector(unsigned(i_reg_905) + unsigned(ap_const_lv5_1));
    add_ln18_fu_1035_p2 <= std_logic_vector(unsigned(j_reg_916) + unsigned(ap_const_lv5_1));
    add_ln24_fu_1087_p2 <= std_logic_vector(unsigned(i_1_reg_927) + unsigned(ap_const_lv5_1));
    add_ln25_fu_1103_p2 <= std_logic_vector(unsigned(j_1_reg_938) + unsigned(ap_const_lv5_1));
    add_ln32_1_fu_1175_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_965_p4) + unsigned(ap_const_lv5_1));
    add_ln32_fu_1339_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_949) + unsigned(ap_const_lv9_1));
    add_ln34_fu_1253_p2 <= std_logic_vector(unsigned(select_ln32_fu_1167_p3) + unsigned(ap_const_lv5_1));
    add_ln42_fu_1353_p2 <= std_logic_vector(unsigned(i_3_reg_995) + unsigned(ap_const_lv5_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(10);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_01001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln42_reg_1655, ap_enable_reg_pp1_iter2, icmp_ln42_reg_1655_pp1_iter1_reg, out_stream_TREADY_int_regslice)
    begin
                ap_block_pp1_stage0_01001 <= (((icmp_ln42_reg_1655_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (out_stream_TREADY_int_regslice = ap_const_logic_0)) or ((icmp_ln42_reg_1655 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (out_stream_TREADY_int_regslice = ap_const_logic_0)));
    end process;


    ap_block_pp1_stage0_11001_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln42_reg_1655, ap_enable_reg_pp1_iter2, icmp_ln42_reg_1655_pp1_iter1_reg, ap_block_state19_io, ap_block_state20_io, out_stream_TREADY_int_regslice)
    begin
                ap_block_pp1_stage0_11001 <= (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state20_io) or ((icmp_ln42_reg_1655_pp1_iter1_reg = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state19_io) or ((icmp_ln42_reg_1655 = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0)))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(ap_enable_reg_pp1_iter1, icmp_ln42_reg_1655, ap_enable_reg_pp1_iter2, icmp_ln42_reg_1655_pp1_iter1_reg, ap_block_state19_io, ap_block_state20_io, out_stream_TREADY_int_regslice)
    begin
                ap_block_pp1_stage0_subdone <= (((ap_enable_reg_pp1_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state20_io) or ((icmp_ln42_reg_1655_pp1_iter1_reg = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0)))) or ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state19_io) or ((icmp_ln42_reg_1655 = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0)))));
    end process;

        ap_block_state10_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state19_io_assign_proc : process(icmp_ln42_reg_1655, out_stream_TREADY_int_regslice)
    begin
                ap_block_state19_io <= ((icmp_ln42_reg_1655 = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state19_pp1_stage0_iter1_assign_proc : process(icmp_ln42_reg_1655, out_stream_TREADY_int_regslice)
    begin
                ap_block_state19_pp1_stage0_iter1 <= ((icmp_ln42_reg_1655 = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state20_io_assign_proc : process(icmp_ln42_reg_1655_pp1_iter1_reg, out_stream_TREADY_int_regslice)
    begin
                ap_block_state20_io <= ((icmp_ln42_reg_1655_pp1_iter1_reg = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state20_pp1_stage0_iter2_assign_proc : process(icmp_ln42_reg_1655_pp1_iter1_reg, out_stream_TREADY_int_regslice)
    begin
                ap_block_state20_pp1_stage0_iter2 <= ((icmp_ln42_reg_1655_pp1_iter1_reg = ap_const_lv1_0) and (out_stream_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state3_assign_proc : process(icmp_ln18_fu_1061_p2, in_stream_TVALID_int_regslice)
    begin
                ap_block_state3 <= ((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state6_assign_proc : process(icmp_ln25_fu_1129_p2, in_stream_TVALID_int_regslice)
    begin
                ap_block_state6 <= ((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter1_state12_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter1_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter1_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp0_flush_enable_assign_proc : process(icmp_ln32_reg_1422, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln32_reg_1422 = ap_const_lv1_1))) then 
            ap_condition_pp0_flush_enable <= ap_const_logic_1;
        else 
            ap_condition_pp0_flush_enable <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state18_assign_proc : process(icmp_ln42_fu_1359_p2)
    begin
        if ((icmp_ln42_fu_1359_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state18 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state21, regslice_both_out_stream_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_965_p4_assign_proc : process(i_2_reg_961, icmp_ln32_reg_1422, ap_CS_fsm_pp0_stage0, select_ln32_3_reg_1436, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then 
            ap_phi_mux_i_2_phi_fu_965_p4 <= select_ln32_3_reg_1436;
        else 
            ap_phi_mux_i_2_phi_fu_965_p4 <= i_2_reg_961;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_953_p4_assign_proc : process(indvar_flatten_reg_949, icmp_ln32_reg_1422, ap_CS_fsm_pp0_stage0, add_ln32_reg_1630, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_953_p4 <= add_ln32_reg_1630;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_953_p4 <= indvar_flatten_reg_949;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_976_p4_assign_proc : process(k_reg_972, icmp_ln32_reg_1422, ap_CS_fsm_pp0_stage0, add_ln34_reg_1611, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln32_reg_1422 = ap_const_lv1_0))) then 
            ap_phi_mux_k_phi_fu_976_p4 <= add_ln34_reg_1611;
        else 
            ap_phi_mux_k_phi_fu_976_p4 <= k_reg_972;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state21, regslice_both_out_stream_V_data_V_U_apdone_blk)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (regslice_both_out_stream_V_data_V_U_apdone_blk = ap_const_logic_0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln21_fu_1067_p1 <= in_stream_TDATA_int_regslice;
    bitcast_ln28_fu_1135_p1 <= in_stream_TDATA_int_regslice;
    grp_fu_1006_p0 <= 
        ap_const_lv32_0 when (icmp_ln34_reg_1426_pp0_iter1_reg(0) = '1') else 
        res_reg_983;
    icmp_ln17_fu_1025_p2 <= "1" when (i_reg_905 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_1061_p2 <= "1" when (j_reg_916 = ap_const_lv5_10) else "0";
    icmp_ln24_fu_1093_p2 <= "1" when (i_1_reg_927 = ap_const_lv5_10) else "0";
    icmp_ln25_fu_1129_p2 <= "1" when (j_1_reg_938 = ap_const_lv5_10) else "0";
    icmp_ln32_fu_1155_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_953_p4 = ap_const_lv9_100) else "0";
    icmp_ln34_1_fu_1259_p2 <= "1" when (add_ln34_fu_1253_p2 = ap_const_lv5_10) else "0";
    icmp_ln34_fu_1161_p2 <= "1" when (ap_phi_mux_k_phi_fu_976_p4 = ap_const_lv5_10) else "0";
    icmp_ln42_fu_1359_p2 <= "1" when (i_3_reg_995 = ap_const_lv5_10) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, in_stream_TVALID_int_regslice)
    begin
        if ((((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID_int_regslice;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_stream_TREADY <= regslice_both_in_stream_V_data_V_U_ack_in;

    in_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state3, icmp_ln18_fu_1061_p2, ap_CS_fsm_state6, icmp_ln25_fu_1129_p2, in_stream_TVALID_int_regslice)
    begin
        if (((not(((icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln25_fu_1129_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6)) or (not(((icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (in_stream_TVALID_int_regslice = ap_const_logic_0))) and (icmp_ln18_fu_1061_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            in_stream_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    mulOut_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0, ap_CS_fsm_pp0_stage0, zext_ln32_reg_1431_pp0_iter1_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, zext_ln42_fu_1365_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            mulOut_address0 <= zext_ln42_fu_1365_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mulOut_address0 <= zext_ln32_reg_1431_pp0_iter1_reg(4 - 1 downto 0);
        else 
            mulOut_address0 <= "XXXX";
        end if; 
    end process;


    mulOut_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mulOut_ce0 <= ap_const_logic_1;
        else 
            mulOut_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mulOut_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln34_1_reg_1616_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln34_1_reg_1616_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mulOut_we0 <= ap_const_logic_1;
        else 
            mulOut_we0 <= ap_const_logic_0;
        end if; 
    end process;


    out_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0, icmp_ln42_reg_1655, ap_enable_reg_pp1_iter2, icmp_ln42_reg_1655_pp1_iter1_reg, out_stream_TREADY_int_regslice)
    begin
        if ((((icmp_ln42_reg_1655_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0)) or ((icmp_ln42_reg_1655 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            out_stream_TDATA_blk_n <= out_stream_TREADY_int_regslice;
        else 
            out_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_stream_TDATA_int_regslice <= mulOut_q0;
    out_stream_TVALID <= regslice_both_out_stream_V_data_V_U_vld_out;

    out_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, icmp_ln42_reg_1655, ap_block_pp1_stage0_11001)
    begin
        if (((icmp_ln42_reg_1655 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            out_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    select_ln32_3_fu_1217_p3 <= 
        add_ln32_1_fu_1175_p2 when (icmp_ln34_fu_1161_p2(0) = '1') else 
        ap_phi_mux_i_2_phi_fu_965_p4;
    select_ln32_4_fu_1189_p3 <= 
        trunc_ln32_fu_1181_p1 when (icmp_ln34_fu_1161_p2(0) = '1') else 
        trunc_ln32_1_fu_1185_p1;
    select_ln32_fu_1167_p3 <= 
        ap_const_lv5_0 when (icmp_ln34_fu_1161_p2(0) = '1') else 
        ap_phi_mux_k_phi_fu_976_p4;
    trunc_ln21_fu_1031_p1 <= i_reg_905(4 - 1 downto 0);
    trunc_ln28_fu_1099_p1 <= i_1_reg_927(4 - 1 downto 0);
    trunc_ln32_1_fu_1185_p1 <= ap_phi_mux_i_2_phi_fu_965_p4(4 - 1 downto 0);
    trunc_ln32_2_fu_1225_p1 <= select_ln32_3_fu_1217_p3(4 - 1 downto 0);
    trunc_ln32_fu_1181_p1 <= add_ln32_1_fu_1175_p2(4 - 1 downto 0);
    trunc_ln36_fu_1249_p1 <= select_ln32_fu_1167_p3(4 - 1 downto 0);
    valOut_last_V_fu_1370_p2 <= "1" when (i_3_reg_995 = ap_const_lv5_F) else "0";
    zext_ln18_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_916),64));
    zext_ln25_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_938),64));
    zext_ln32_fu_1197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_4_fu_1189_p3),64));
    zext_ln34_fu_1229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln32_fu_1167_p3),64));
    zext_ln42_fu_1365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_995),64));
end behav;
