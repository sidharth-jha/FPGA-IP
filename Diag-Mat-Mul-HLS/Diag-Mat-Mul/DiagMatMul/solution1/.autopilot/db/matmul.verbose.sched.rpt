

================================================================
== Vivado HLS Report for 'matmul'
================================================================
* Date:           Tue Oct  5 15:27:05 2021

* Version:        2019.2 (Build 2704478 on Wed Nov 06 22:10:23 MST 2019)
* Project:        DiagMatMul
* Solution:       solution1
* Product family: zynquplus
* Target device:  xczu28dr-ffvg1517-2-e


================================================================
== Performance Estimates
================================================================
+ Timing: 
    * Summary: 
    +--------+----------+----------+------------+
    |  Clock |  Target  | Estimated| Uncertainty|
    +--------+----------+----------+------------+
    |ap_clk  | 10.00 ns | 8.419 ns |   1.25 ns  |
    +--------+----------+----------+------------+

+ Latency: 
    * Summary: 
    +---------+---------+----------+----------+-----+-----+---------+
    |  Latency (cycles) |  Latency (absolute) |  Interval | Pipeline|
    |   min   |   max   |    min   |    max   | min | max |   Type  |
    +---------+---------+----------+----------+-----+-----+---------+
    |      703|      703| 7.030 us | 7.030 us |  703|  703|   none  |
    +---------+---------+----------+----------+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +------------------+---------+---------+----------+-----------+-----------+------+----------+
        |                  |  Latency (cycles) | Iteration|  Initiation Interval  | Trip |          |
        |     Loop Name    |   min   |   max   |  Latency |  achieved |   target  | Count| Pipelined|
        +------------------+---------+---------+----------+-----------+-----------+------+----------+
        |- loop_input_A1   |      288|      288|        18|          -|          -|    16|    no    |
        | + loop_input_A2  |       16|       16|         1|          -|          -|    16|    no    |
        |- loop_input_B1   |      288|      288|        18|          -|          -|    16|    no    |
        | + loop_input_B2  |       16|       16|         1|          -|          -|    16|    no    |
        |- loop_out1       |       17|       17|         3|          1|          1|    16|    yes   |
        +------------------+---------+---------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 3


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 10
* Pipeline : 1
  Pipeline-0 : II = 1, D = 3, States = { 7 8 9 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 2 
2 --> 3 4 
3 --> 3 2 
4 --> 6 5 
5 --> 5 4 
6 --> 7 
7 --> 10 8 
8 --> 9 
9 --> 7 
10 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 0.65>
ST_1 : Operation 11 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %in_stream_V_data_V), !map !71"   --->   Operation 11 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 12 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %in_stream_V_keep_V), !map !75"   --->   Operation 12 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 13 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %in_stream_V_strb_V), !map !79"   --->   Operation 13 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 14 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %in_stream_V_last_V), !map !83"   --->   Operation 14 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 15 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i64* %out_stream_V_data_V), !map !87"   --->   Operation 15 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 16 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %out_stream_V_keep_V), !map !91"   --->   Operation 16 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 17 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i8* %out_stream_V_strb_V), !map !95"   --->   Operation 17 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 18 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i1* %out_stream_V_last_V), !map !99"   --->   Operation 18 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 19 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([7 x i8]* @matmul_str) nounwind"   --->   Operation 19 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 20 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i1* %out_stream_V_last_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [matmul.cpp:16]   --->   Operation 20 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 21 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i64* %in_stream_V_data_V, i8* %in_stream_V_keep_V, i8* %in_stream_V_strb_V, i1* %in_stream_V_last_V, [5 x i8]* @p_str3, i32 1, i32 1, [5 x i8]* @p_str4, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [matmul.cpp:17]   --->   Operation 21 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 22 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecInterface(i32 0, [10 x i8]* @p_str5, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [8 x i8]* @p_str6, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind" [matmul.cpp:18]   --->   Operation 22 'specinterface' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 23 [1/1] (0.65ns)   --->   "br label %0" [matmul.cpp:34]   --->   Operation 23 'br' <Predicate = true> <Delay = 0.65>

State 2 <SV = 1> <Delay = 0.95>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%i_0 = phi i5 [ %i, %loop_input_A1_end ], [ 0, %arrayctor.loop4.preheader ]"   --->   Operation 24 'phi' 'i_0' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.75ns)   --->   "%icmp_ln34 = icmp eq i5 %i_0, -16" [matmul.cpp:34]   --->   Operation 25 'icmp' 'icmp_ln34' <Predicate = true> <Delay = 0.75> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 26 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)"   --->   Operation 26 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 27 [1/1] (0.78ns)   --->   "%i = add i5 %i_0, 1" [matmul.cpp:34]   --->   Operation 27 'add' 'i' <Predicate = true> <Delay = 0.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 28 [1/1] (0.00ns)   --->   "br i1 %icmp_ln34, label %.preheader.preheader, label %loop_input_A1_begin" [matmul.cpp:34]   --->   Operation 28 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str9) nounwind" [matmul.cpp:34]   --->   Operation 29 'specloopname' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%tmp = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str9)" [matmul.cpp:34]   --->   Operation 30 'specregionbegin' 'tmp' <Predicate = (!icmp_ln34)> <Delay = 0.00>
ST_2 : Operation 31 [1/1] (0.65ns)   --->   "br label %1" [matmul.cpp:35]   --->   Operation 31 'br' <Predicate = (!icmp_ln34)> <Delay = 0.65>
ST_2 : Operation 32 [1/1] (0.65ns)   --->   "br label %.preheader" [matmul.cpp:46]   --->   Operation 32 'br' <Predicate = (icmp_ln34)> <Delay = 0.65>

State 3 <SV = 2> <Delay = 1.23>
ST_3 : Operation 33 [1/1] (0.00ns)   --->   "%j_0 = phi i5 [ 0, %loop_input_A1_begin ], [ %j, %3 ]"   --->   Operation 33 'phi' 'j_0' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 34 [1/1] (0.75ns)   --->   "%icmp_ln35 = icmp eq i5 %j_0, -16" [matmul.cpp:35]   --->   Operation 34 'icmp' 'icmp_ln35' <Predicate = true> <Delay = 0.75> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 35 [1/1] (0.00ns)   --->   "%empty_7 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)"   --->   Operation 35 'speclooptripcount' 'empty_7' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 36 [1/1] (0.78ns)   --->   "%j = add i5 %j_0, 1" [matmul.cpp:35]   --->   Operation 36 'add' 'j' <Predicate = true> <Delay = 0.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 37 [1/1] (0.00ns)   --->   "br i1 %icmp_ln35, label %loop_input_A1_end, label %2" [matmul.cpp:35]   --->   Operation 37 'br' <Predicate = true> <Delay = 0.00>
ST_3 : Operation 38 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str10) nounwind" [matmul.cpp:35]   --->   Operation 38 'specloopname' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 39 [1/1] (0.00ns)   --->   "%empty_8 = call { i64, i8, i8, i1 } @_ssdm_op_Read.axis.volatile.i64P.i8P.i8P.i1P(i64* %in_stream_V_data_V, i8* %in_stream_V_keep_V, i8* %in_stream_V_strb_V, i1* %in_stream_V_last_V)" [matmul.cpp:36]   --->   Operation 39 'read' 'empty_8' <Predicate = (!icmp_ln35)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_3 : Operation 40 [1/1] (0.00ns)   --->   "%tmp_data_V_2 = extractvalue { i64, i8, i8, i1 } %empty_8, 0" [matmul.cpp:36]   --->   Operation 40 'extractvalue' 'tmp_data_V_2' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 41 [1/1] (0.00ns)   --->   "%p_Result_s = call i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64 %tmp_data_V_2, i32 32, i32 63)" [matmul.cpp:37]   --->   Operation 41 'partselect' 'p_Result_s' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 42 [1/1] (0.00ns)   --->   "%trunc_ln38_1 = call i3 @_ssdm_op_PartSelect.i3.i5.i32.i32(i5 %j_0, i32 2, i32 4)" [matmul.cpp:38]   --->   Operation 42 'partselect' 'trunc_ln38_1' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 43 [1/1] (0.00ns)   --->   "%trunc_ln38 = trunc i5 %j_0 to i2" [matmul.cpp:38]   --->   Operation 43 'trunc' 'trunc_ln38' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%tmp_7 = call i7 @_ssdm_op_BitConcatenate.i7.i5.i2(i5 %i_0, i2 %trunc_ln38)" [matmul.cpp:38]   --->   Operation 44 'bitconcatenate' 'tmp_7' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "%zext_ln38 = zext i7 %tmp_7 to i64" [matmul.cpp:38]   --->   Operation 45 'zext' 'zext_ln38' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 46 [1/1] (0.00ns)   --->   "%A_M_imag_0_addr = getelementptr [64 x float]* @A_M_imag_0, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 46 'getelementptr' 'A_M_imag_0_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 47 [1/1] (0.00ns)   --->   "%A_M_imag_1_addr = getelementptr [64 x float]* @A_M_imag_1, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 47 'getelementptr' 'A_M_imag_1_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 48 [1/1] (0.00ns)   --->   "%A_M_imag_2_addr = getelementptr [64 x float]* @A_M_imag_2, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 48 'getelementptr' 'A_M_imag_2_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 49 [1/1] (0.00ns)   --->   "%A_M_imag_3_addr = getelementptr [64 x float]* @A_M_imag_3, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 49 'getelementptr' 'A_M_imag_3_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 50 [1/1] (0.00ns)   --->   "%A_M_real_0_addr = getelementptr [64 x float]* @A_M_real_0, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 50 'getelementptr' 'A_M_real_0_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 51 [1/1] (0.00ns)   --->   "%A_M_real_1_addr = getelementptr [64 x float]* @A_M_real_1, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 51 'getelementptr' 'A_M_real_1_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 52 [1/1] (0.00ns)   --->   "%A_M_real_2_addr = getelementptr [64 x float]* @A_M_real_2, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 52 'getelementptr' 'A_M_real_2_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 53 [1/1] (0.00ns)   --->   "%A_M_real_3_addr = getelementptr [64 x float]* @A_M_real_3, i64 0, i64 %zext_ln38" [matmul.cpp:38]   --->   Operation 53 'getelementptr' 'A_M_real_3_addr' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 54 [1/1] (0.00ns)   --->   "%bitcast_ln38 = bitcast i32 %p_Result_s to float" [matmul.cpp:38]   --->   Operation 54 'bitcast' 'bitcast_ln38' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 55 [1/1] (0.00ns)   --->   "%trunc_ln681 = trunc i64 %tmp_data_V_2 to i32" [matmul.cpp:40]   --->   Operation 55 'trunc' 'trunc_ln681' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 56 [1/1] (0.00ns)   --->   "%bitcast_ln41 = bitcast i32 %trunc_ln681 to float" [matmul.cpp:41]   --->   Operation 56 'bitcast' 'bitcast_ln41' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 57 [1/1] (0.72ns)   --->   "switch i3 %trunc_ln38_1, label %branch3 [
    i3 0, label %branch0
    i3 1, label %branch1
    i3 2, label %branch2
  ]" [matmul.cpp:38]   --->   Operation 57 'switch' <Predicate = (!icmp_ln35)> <Delay = 0.72>
ST_3 : Operation 58 [1/1] (1.23ns)   --->   "store float %bitcast_ln38, float* %A_M_real_2_addr, align 4" [matmul.cpp:38]   --->   Operation 58 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 2)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 59 [1/1] (1.23ns)   --->   "store float %bitcast_ln41, float* %A_M_imag_2_addr, align 4" [matmul.cpp:41]   --->   Operation 59 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 2)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 60 [1/1] (0.00ns)   --->   "br label %3"   --->   Operation 60 'br' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 2)> <Delay = 0.00>
ST_3 : Operation 61 [1/1] (1.23ns)   --->   "store float %bitcast_ln38, float* %A_M_real_1_addr, align 4" [matmul.cpp:38]   --->   Operation 61 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 1)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 62 [1/1] (1.23ns)   --->   "store float %bitcast_ln41, float* %A_M_imag_1_addr, align 4" [matmul.cpp:41]   --->   Operation 62 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 1)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 63 [1/1] (0.00ns)   --->   "br label %3"   --->   Operation 63 'br' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 1)> <Delay = 0.00>
ST_3 : Operation 64 [1/1] (1.23ns)   --->   "store float %bitcast_ln38, float* %A_M_real_0_addr, align 4" [matmul.cpp:38]   --->   Operation 64 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 0)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 65 [1/1] (1.23ns)   --->   "store float %bitcast_ln41, float* %A_M_imag_0_addr, align 4" [matmul.cpp:41]   --->   Operation 65 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 0)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "br label %3"   --->   Operation 66 'br' <Predicate = (!icmp_ln35 & trunc_ln38_1 == 0)> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (1.23ns)   --->   "store float %bitcast_ln38, float* %A_M_real_3_addr, align 4" [matmul.cpp:38]   --->   Operation 67 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 != 0 & trunc_ln38_1 != 1 & trunc_ln38_1 != 2)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 68 [1/1] (1.23ns)   --->   "store float %bitcast_ln41, float* %A_M_imag_3_addr, align 4" [matmul.cpp:41]   --->   Operation 68 'store' <Predicate = (!icmp_ln35 & trunc_ln38_1 != 0 & trunc_ln38_1 != 1 & trunc_ln38_1 != 2)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_3 : Operation 69 [1/1] (0.00ns)   --->   "br label %3"   --->   Operation 69 'br' <Predicate = (!icmp_ln35 & trunc_ln38_1 != 0 & trunc_ln38_1 != 1 & trunc_ln38_1 != 2)> <Delay = 0.00>
ST_3 : Operation 70 [1/1] (0.00ns)   --->   "br label %1" [matmul.cpp:35]   --->   Operation 70 'br' <Predicate = (!icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 71 [1/1] (0.00ns)   --->   "%empty_9 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str9, i32 %tmp)" [matmul.cpp:44]   --->   Operation 71 'specregionend' 'empty_9' <Predicate = (icmp_ln35)> <Delay = 0.00>
ST_3 : Operation 72 [1/1] (0.00ns)   --->   "br label %0" [matmul.cpp:34]   --->   Operation 72 'br' <Predicate = (icmp_ln35)> <Delay = 0.00>

State 4 <SV = 2> <Delay = 0.95>
ST_4 : Operation 73 [1/1] (0.00ns)   --->   "%i_1 = phi i5 [ %i_4, %loop_input_B1_end ], [ 0, %.preheader.preheader ]"   --->   Operation 73 'phi' 'i_1' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 74 [1/1] (0.75ns)   --->   "%icmp_ln46 = icmp eq i5 %i_1, -16" [matmul.cpp:46]   --->   Operation 74 'icmp' 'icmp_ln46' <Predicate = true> <Delay = 0.75> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 75 [1/1] (0.00ns)   --->   "%empty_10 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)"   --->   Operation 75 'speclooptripcount' 'empty_10' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 76 [1/1] (0.78ns)   --->   "%i_4 = add i5 %i_1, 1" [matmul.cpp:46]   --->   Operation 76 'add' 'i_4' <Predicate = true> <Delay = 0.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_4 : Operation 77 [1/1] (0.00ns)   --->   "br i1 %icmp_ln46, label %7, label %loop_input_B1_begin" [matmul.cpp:46]   --->   Operation 77 'br' <Predicate = true> <Delay = 0.00>
ST_4 : Operation 78 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str11) nounwind" [matmul.cpp:46]   --->   Operation 78 'specloopname' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 79 [1/1] (0.00ns)   --->   "%tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([14 x i8]* @p_str11)" [matmul.cpp:46]   --->   Operation 79 'specregionbegin' 'tmp_1' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 80 [1/1] (0.00ns)   --->   "%trunc_ln50 = trunc i5 %i_1 to i2" [matmul.cpp:50]   --->   Operation 80 'trunc' 'trunc_ln50' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 81 [1/1] (0.00ns)   --->   "%lshr_ln = call i3 @_ssdm_op_PartSelect.i3.i5.i32.i32(i5 %i_1, i32 2, i32 4)" [matmul.cpp:50]   --->   Operation 81 'partselect' 'lshr_ln' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 82 [1/1] (0.00ns)   --->   "%tmp_3 = call i7 @_ssdm_op_BitConcatenate.i7.i3.i4(i3 %lshr_ln, i4 0)" [matmul.cpp:50]   --->   Operation 82 'bitconcatenate' 'tmp_3' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 83 [1/1] (0.00ns)   --->   "%zext_ln47 = zext i7 %tmp_3 to i8" [matmul.cpp:47]   --->   Operation 83 'zext' 'zext_ln47' <Predicate = (!icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 84 [1/1] (0.65ns)   --->   "br label %4" [matmul.cpp:47]   --->   Operation 84 'br' <Predicate = (!icmp_ln46)> <Delay = 0.65>
ST_4 : Operation 85 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_0_l = load float* @mulOut_M_real_0_0, align 4" [matmul.cpp:58]   --->   Operation 85 'load' 'mulOut_M_real_0_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 86 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_1_l = load float* @mulOut_M_real_0_1, align 4" [matmul.cpp:58]   --->   Operation 86 'load' 'mulOut_M_real_0_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 87 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_2_l = load float* @mulOut_M_real_0_2, align 4" [matmul.cpp:58]   --->   Operation 87 'load' 'mulOut_M_real_0_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 88 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_3_l = load float* @mulOut_M_real_0_3, align 4" [matmul.cpp:58]   --->   Operation 88 'load' 'mulOut_M_real_0_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 89 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_0_l = load float* @mulOut_M_real_1_0, align 4" [matmul.cpp:58]   --->   Operation 89 'load' 'mulOut_M_real_1_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 90 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_1_l = load float* @mulOut_M_real_1_1, align 4" [matmul.cpp:58]   --->   Operation 90 'load' 'mulOut_M_real_1_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 91 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_2_l = load float* @mulOut_M_real_1_2, align 4" [matmul.cpp:58]   --->   Operation 91 'load' 'mulOut_M_real_1_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 92 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_3_l = load float* @mulOut_M_real_1_3, align 4" [matmul.cpp:58]   --->   Operation 92 'load' 'mulOut_M_real_1_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 93 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_0_l = load float* @mulOut_M_real_2_0, align 4" [matmul.cpp:58]   --->   Operation 93 'load' 'mulOut_M_real_2_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 94 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_1_l = load float* @mulOut_M_real_2_1, align 4" [matmul.cpp:58]   --->   Operation 94 'load' 'mulOut_M_real_2_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 95 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_2_l = load float* @mulOut_M_real_2_2, align 4" [matmul.cpp:58]   --->   Operation 95 'load' 'mulOut_M_real_2_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 96 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_3_l = load float* @mulOut_M_real_2_3, align 4" [matmul.cpp:58]   --->   Operation 96 'load' 'mulOut_M_real_2_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 97 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_0_l = load float* @mulOut_M_real_3_0, align 4" [matmul.cpp:58]   --->   Operation 97 'load' 'mulOut_M_real_3_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 98 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_1_l = load float* @mulOut_M_real_3_1, align 4" [matmul.cpp:58]   --->   Operation 98 'load' 'mulOut_M_real_3_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 99 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_2_l = load float* @mulOut_M_real_3_2, align 4" [matmul.cpp:58]   --->   Operation 99 'load' 'mulOut_M_real_3_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 100 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_3_l = load float* @mulOut_M_real_3_3, align 4" [matmul.cpp:58]   --->   Operation 100 'load' 'mulOut_M_real_3_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 101 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_0_l = load float* @mulOut_M_imag_0_0, align 4" [matmul.cpp:58]   --->   Operation 101 'load' 'mulOut_M_imag_0_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 102 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_1_l = load float* @mulOut_M_imag_0_1, align 4" [matmul.cpp:58]   --->   Operation 102 'load' 'mulOut_M_imag_0_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 103 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_2_l = load float* @mulOut_M_imag_0_2, align 4" [matmul.cpp:58]   --->   Operation 103 'load' 'mulOut_M_imag_0_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 104 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_3_l = load float* @mulOut_M_imag_0_3, align 4" [matmul.cpp:58]   --->   Operation 104 'load' 'mulOut_M_imag_0_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 105 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_0_l = load float* @mulOut_M_imag_1_0, align 4" [matmul.cpp:58]   --->   Operation 105 'load' 'mulOut_M_imag_1_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 106 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_1_l = load float* @mulOut_M_imag_1_1, align 4" [matmul.cpp:58]   --->   Operation 106 'load' 'mulOut_M_imag_1_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 107 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_2_l = load float* @mulOut_M_imag_1_2, align 4" [matmul.cpp:58]   --->   Operation 107 'load' 'mulOut_M_imag_1_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 108 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_3_l = load float* @mulOut_M_imag_1_3, align 4" [matmul.cpp:58]   --->   Operation 108 'load' 'mulOut_M_imag_1_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 109 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_0_l = load float* @mulOut_M_imag_2_0, align 4" [matmul.cpp:58]   --->   Operation 109 'load' 'mulOut_M_imag_2_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 110 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_1_l = load float* @mulOut_M_imag_2_1, align 4" [matmul.cpp:58]   --->   Operation 110 'load' 'mulOut_M_imag_2_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 111 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_2_l = load float* @mulOut_M_imag_2_2, align 4" [matmul.cpp:58]   --->   Operation 111 'load' 'mulOut_M_imag_2_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 112 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_3_l = load float* @mulOut_M_imag_2_3, align 4" [matmul.cpp:58]   --->   Operation 112 'load' 'mulOut_M_imag_2_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 113 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_0_l = load float* @mulOut_M_imag_3_0, align 4" [matmul.cpp:58]   --->   Operation 113 'load' 'mulOut_M_imag_3_0_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 114 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_1_l = load float* @mulOut_M_imag_3_1, align 4" [matmul.cpp:58]   --->   Operation 114 'load' 'mulOut_M_imag_3_1_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 115 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_2_l = load float* @mulOut_M_imag_3_2, align 4" [matmul.cpp:58]   --->   Operation 115 'load' 'mulOut_M_imag_3_2_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 116 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_3_l = load float* @mulOut_M_imag_3_3, align 4" [matmul.cpp:58]   --->   Operation 116 'load' 'mulOut_M_imag_3_3_l' <Predicate = (icmp_ln46)> <Delay = 0.00>
ST_4 : Operation 117 [2/2] (0.00ns)   --->   "%call_ret = call fastcc { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } @DiagMatMul([64 x float]* @A_M_real_0, [64 x float]* @A_M_real_1, [64 x float]* @A_M_real_2, [64 x float]* @A_M_real_3, [64 x float]* @A_M_imag_0, [64 x float]* @A_M_imag_1, [64 x float]* @A_M_imag_2, [64 x float]* @A_M_imag_3, [64 x float]* @B_M_real_0, [64 x float]* @B_M_real_1, [64 x float]* @B_M_real_2, [64 x float]* @B_M_real_3, [64 x float]* @B_M_imag_0, [64 x float]* @B_M_imag_1, [64 x float]* @B_M_imag_2, [64 x float]* @B_M_imag_3, float %mulOut_M_real_0_0_l, float %mulOut_M_real_0_1_l, float %mulOut_M_real_0_2_l, float %mulOut_M_real_0_3_l, float %mulOut_M_real_1_0_l, float %mulOut_M_real_1_1_l, float %mulOut_M_real_1_2_l, float %mulOut_M_real_1_3_l, float %mulOut_M_real_2_0_l, float %mulOut_M_real_2_1_l, float %mulOut_M_real_2_2_l, float %mulOut_M_real_2_3_l, float %mulOut_M_real_3_0_l, float %mulOut_M_real_3_1_l, float %mulOut_M_real_3_2_l, float %mulOut_M_real_3_3_l, float %mulOut_M_imag_0_0_l, float %mulOut_M_imag_0_1_l, float %mulOut_M_imag_0_2_l, float %mulOut_M_imag_0_3_l, float %mulOut_M_imag_1_0_l, float %mulOut_M_imag_1_1_l, float %mulOut_M_imag_1_2_l, float %mulOut_M_imag_1_3_l, float %mulOut_M_imag_2_0_l, float %mulOut_M_imag_2_1_l, float %mulOut_M_imag_2_2_l, float %mulOut_M_imag_2_3_l, float %mulOut_M_imag_3_0_l, float %mulOut_M_imag_3_1_l, float %mulOut_M_imag_3_2_l, float %mulOut_M_imag_3_3_l)" [matmul.cpp:58]   --->   Operation 117 'call' 'call_ret' <Predicate = (icmp_ln46)> <Delay = 0.00> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >

State 5 <SV = 3> <Delay = 2.01>
ST_5 : Operation 118 [1/1] (0.00ns)   --->   "%j_1 = phi i5 [ 0, %loop_input_B1_begin ], [ %j_2, %6 ]"   --->   Operation 118 'phi' 'j_1' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 119 [1/1] (0.75ns)   --->   "%icmp_ln47 = icmp eq i5 %j_1, -16" [matmul.cpp:47]   --->   Operation 119 'icmp' 'icmp_ln47' <Predicate = true> <Delay = 0.75> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 120 [1/1] (0.00ns)   --->   "%empty_11 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)"   --->   Operation 120 'speclooptripcount' 'empty_11' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 121 [1/1] (0.78ns)   --->   "%j_2 = add i5 %j_1, 1" [matmul.cpp:47]   --->   Operation 121 'add' 'j_2' <Predicate = true> <Delay = 0.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 122 [1/1] (0.00ns)   --->   "br i1 %icmp_ln47, label %loop_input_B1_end, label %5" [matmul.cpp:47]   --->   Operation 122 'br' <Predicate = true> <Delay = 0.00>
ST_5 : Operation 123 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([14 x i8]* @p_str12) nounwind" [matmul.cpp:47]   --->   Operation 123 'specloopname' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 124 [1/1] (0.00ns)   --->   "%empty_12 = call { i64, i8, i8, i1 } @_ssdm_op_Read.axis.volatile.i64P.i8P.i8P.i1P(i64* %in_stream_V_data_V, i8* %in_stream_V_keep_V, i8* %in_stream_V_strb_V, i1* %in_stream_V_last_V)" [matmul.cpp:48]   --->   Operation 124 'read' 'empty_12' <Predicate = (!icmp_ln47)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_5 : Operation 125 [1/1] (0.00ns)   --->   "%tmp_data_V_3 = extractvalue { i64, i8, i8, i1 } %empty_12, 0" [matmul.cpp:48]   --->   Operation 125 'extractvalue' 'tmp_data_V_3' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 126 [1/1] (0.00ns)   --->   "%p_Result_4 = call i32 @_ssdm_op_PartSelect.i32.i64.i32.i32(i64 %tmp_data_V_3, i32 32, i32 63)" [matmul.cpp:49]   --->   Operation 126 'partselect' 'p_Result_4' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 127 [1/1] (0.00ns)   --->   "%zext_ln50 = zext i5 %j_1 to i8" [matmul.cpp:50]   --->   Operation 127 'zext' 'zext_ln50' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 128 [1/1] (0.77ns)   --->   "%add_ln50 = add i8 %zext_ln50, %zext_ln47" [matmul.cpp:50]   --->   Operation 128 'add' 'add_ln50' <Predicate = (!icmp_ln47)> <Delay = 0.77> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_5 : Operation 129 [1/1] (0.00ns)   --->   "%zext_ln50_1 = zext i8 %add_ln50 to i64" [matmul.cpp:50]   --->   Operation 129 'zext' 'zext_ln50_1' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 130 [1/1] (0.00ns)   --->   "%B_M_imag_0_addr = getelementptr [64 x float]* @B_M_imag_0, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 130 'getelementptr' 'B_M_imag_0_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 131 [1/1] (0.00ns)   --->   "%B_M_imag_1_addr = getelementptr [64 x float]* @B_M_imag_1, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 131 'getelementptr' 'B_M_imag_1_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 132 [1/1] (0.00ns)   --->   "%B_M_imag_2_addr = getelementptr [64 x float]* @B_M_imag_2, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 132 'getelementptr' 'B_M_imag_2_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 133 [1/1] (0.00ns)   --->   "%B_M_imag_3_addr = getelementptr [64 x float]* @B_M_imag_3, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 133 'getelementptr' 'B_M_imag_3_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 134 [1/1] (0.00ns)   --->   "%B_M_real_0_addr = getelementptr [64 x float]* @B_M_real_0, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 134 'getelementptr' 'B_M_real_0_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 135 [1/1] (0.00ns)   --->   "%B_M_real_1_addr = getelementptr [64 x float]* @B_M_real_1, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 135 'getelementptr' 'B_M_real_1_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 136 [1/1] (0.00ns)   --->   "%B_M_real_2_addr = getelementptr [64 x float]* @B_M_real_2, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 136 'getelementptr' 'B_M_real_2_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 137 [1/1] (0.00ns)   --->   "%B_M_real_3_addr = getelementptr [64 x float]* @B_M_real_3, i64 0, i64 %zext_ln50_1" [matmul.cpp:50]   --->   Operation 137 'getelementptr' 'B_M_real_3_addr' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 138 [1/1] (0.00ns)   --->   "%bitcast_ln50 = bitcast i32 %p_Result_4 to float" [matmul.cpp:50]   --->   Operation 138 'bitcast' 'bitcast_ln50' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 139 [1/1] (0.00ns)   --->   "%trunc_ln681_1 = trunc i64 %tmp_data_V_3 to i32" [matmul.cpp:52]   --->   Operation 139 'trunc' 'trunc_ln681_1' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 140 [1/1] (0.00ns)   --->   "%bitcast_ln53 = bitcast i32 %trunc_ln681_1 to float" [matmul.cpp:53]   --->   Operation 140 'bitcast' 'bitcast_ln53' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 141 [1/1] (0.72ns)   --->   "switch i2 %trunc_ln50, label %branch11 [
    i2 0, label %branch8
    i2 1, label %branch9
    i2 -2, label %branch10
  ]" [matmul.cpp:50]   --->   Operation 141 'switch' <Predicate = (!icmp_ln47)> <Delay = 0.72>
ST_5 : Operation 142 [1/1] (1.23ns)   --->   "store float %bitcast_ln50, float* %B_M_real_2_addr, align 4" [matmul.cpp:50]   --->   Operation 142 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 2)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 143 [1/1] (1.23ns)   --->   "store float %bitcast_ln53, float* %B_M_imag_2_addr, align 4" [matmul.cpp:53]   --->   Operation 143 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 2)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 144 [1/1] (0.00ns)   --->   "br label %6"   --->   Operation 144 'br' <Predicate = (!icmp_ln47 & trunc_ln50 == 2)> <Delay = 0.00>
ST_5 : Operation 145 [1/1] (1.23ns)   --->   "store float %bitcast_ln50, float* %B_M_real_1_addr, align 4" [matmul.cpp:50]   --->   Operation 145 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 1)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 146 [1/1] (1.23ns)   --->   "store float %bitcast_ln53, float* %B_M_imag_1_addr, align 4" [matmul.cpp:53]   --->   Operation 146 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 1)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 147 [1/1] (0.00ns)   --->   "br label %6"   --->   Operation 147 'br' <Predicate = (!icmp_ln47 & trunc_ln50 == 1)> <Delay = 0.00>
ST_5 : Operation 148 [1/1] (1.23ns)   --->   "store float %bitcast_ln50, float* %B_M_real_0_addr, align 4" [matmul.cpp:50]   --->   Operation 148 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 0)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 149 [1/1] (1.23ns)   --->   "store float %bitcast_ln53, float* %B_M_imag_0_addr, align 4" [matmul.cpp:53]   --->   Operation 149 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 0)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 150 [1/1] (0.00ns)   --->   "br label %6"   --->   Operation 150 'br' <Predicate = (!icmp_ln47 & trunc_ln50 == 0)> <Delay = 0.00>
ST_5 : Operation 151 [1/1] (1.23ns)   --->   "store float %bitcast_ln50, float* %B_M_real_3_addr, align 4" [matmul.cpp:50]   --->   Operation 151 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 3)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 152 [1/1] (1.23ns)   --->   "store float %bitcast_ln53, float* %B_M_imag_3_addr, align 4" [matmul.cpp:53]   --->   Operation 152 'store' <Predicate = (!icmp_ln47 & trunc_ln50 == 3)> <Delay = 1.23> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 1.23> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 64> <RAM>
ST_5 : Operation 153 [1/1] (0.00ns)   --->   "br label %6"   --->   Operation 153 'br' <Predicate = (!icmp_ln47 & trunc_ln50 == 3)> <Delay = 0.00>
ST_5 : Operation 154 [1/1] (0.00ns)   --->   "br label %4" [matmul.cpp:47]   --->   Operation 154 'br' <Predicate = (!icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 155 [1/1] (0.00ns)   --->   "%empty_13 = call i32 (...)* @_ssdm_op_SpecRegionEnd([14 x i8]* @p_str11, i32 %tmp_1)" [matmul.cpp:56]   --->   Operation 155 'specregionend' 'empty_13' <Predicate = (icmp_ln47)> <Delay = 0.00>
ST_5 : Operation 156 [1/1] (0.00ns)   --->   "br label %.preheader" [matmul.cpp:46]   --->   Operation 156 'br' <Predicate = (icmp_ln47)> <Delay = 0.00>

State 6 <SV = 3> <Delay = 0.65>
ST_6 : Operation 157 [1/2] (0.44ns)   --->   "%call_ret = call fastcc { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } @DiagMatMul([64 x float]* @A_M_real_0, [64 x float]* @A_M_real_1, [64 x float]* @A_M_real_2, [64 x float]* @A_M_real_3, [64 x float]* @A_M_imag_0, [64 x float]* @A_M_imag_1, [64 x float]* @A_M_imag_2, [64 x float]* @A_M_imag_3, [64 x float]* @B_M_real_0, [64 x float]* @B_M_real_1, [64 x float]* @B_M_real_2, [64 x float]* @B_M_real_3, [64 x float]* @B_M_imag_0, [64 x float]* @B_M_imag_1, [64 x float]* @B_M_imag_2, [64 x float]* @B_M_imag_3, float %mulOut_M_real_0_0_l, float %mulOut_M_real_0_1_l, float %mulOut_M_real_0_2_l, float %mulOut_M_real_0_3_l, float %mulOut_M_real_1_0_l, float %mulOut_M_real_1_1_l, float %mulOut_M_real_1_2_l, float %mulOut_M_real_1_3_l, float %mulOut_M_real_2_0_l, float %mulOut_M_real_2_1_l, float %mulOut_M_real_2_2_l, float %mulOut_M_real_2_3_l, float %mulOut_M_real_3_0_l, float %mulOut_M_real_3_1_l, float %mulOut_M_real_3_2_l, float %mulOut_M_real_3_3_l, float %mulOut_M_imag_0_0_l, float %mulOut_M_imag_0_1_l, float %mulOut_M_imag_0_2_l, float %mulOut_M_imag_0_3_l, float %mulOut_M_imag_1_0_l, float %mulOut_M_imag_1_1_l, float %mulOut_M_imag_1_2_l, float %mulOut_M_imag_1_3_l, float %mulOut_M_imag_2_0_l, float %mulOut_M_imag_2_1_l, float %mulOut_M_imag_2_2_l, float %mulOut_M_imag_2_3_l, float %mulOut_M_imag_3_0_l, float %mulOut_M_imag_3_1_l, float %mulOut_M_imag_3_2_l, float %mulOut_M_imag_3_3_l)" [matmul.cpp:58]   --->   Operation 157 'call' 'call_ret' <Predicate = true> <Delay = 0.44> <CoreType = "Generic">   --->   Core 0 '' <Latency = 0> <II = 1> <Delay = 1.00> <Generic> <Opcode : >
ST_6 : Operation 158 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 0" [matmul.cpp:58]   --->   Operation 158 'extractvalue' 'mulOut_M_real_0_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 159 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_0_0_r, float* @mulOut_M_real_0_0, align 4" [matmul.cpp:58]   --->   Operation 159 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 160 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 1" [matmul.cpp:58]   --->   Operation 160 'extractvalue' 'mulOut_M_real_0_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 161 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_0_1_r, float* @mulOut_M_real_0_1, align 4" [matmul.cpp:58]   --->   Operation 161 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 162 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 2" [matmul.cpp:58]   --->   Operation 162 'extractvalue' 'mulOut_M_real_0_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 163 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_0_2_r, float* @mulOut_M_real_0_2, align 4" [matmul.cpp:58]   --->   Operation 163 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 164 [1/1] (0.00ns)   --->   "%mulOut_M_real_0_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 3" [matmul.cpp:58]   --->   Operation 164 'extractvalue' 'mulOut_M_real_0_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 165 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_0_3_r, float* @mulOut_M_real_0_3, align 4" [matmul.cpp:58]   --->   Operation 165 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 166 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 4" [matmul.cpp:58]   --->   Operation 166 'extractvalue' 'mulOut_M_real_1_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 167 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_1_0_r, float* @mulOut_M_real_1_0, align 4" [matmul.cpp:58]   --->   Operation 167 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 168 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 5" [matmul.cpp:58]   --->   Operation 168 'extractvalue' 'mulOut_M_real_1_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 169 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_1_1_r, float* @mulOut_M_real_1_1, align 4" [matmul.cpp:58]   --->   Operation 169 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 170 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 6" [matmul.cpp:58]   --->   Operation 170 'extractvalue' 'mulOut_M_real_1_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 171 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_1_2_r, float* @mulOut_M_real_1_2, align 4" [matmul.cpp:58]   --->   Operation 171 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 172 [1/1] (0.00ns)   --->   "%mulOut_M_real_1_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 7" [matmul.cpp:58]   --->   Operation 172 'extractvalue' 'mulOut_M_real_1_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 173 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_1_3_r, float* @mulOut_M_real_1_3, align 4" [matmul.cpp:58]   --->   Operation 173 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 174 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 8" [matmul.cpp:58]   --->   Operation 174 'extractvalue' 'mulOut_M_real_2_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 175 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_2_0_r, float* @mulOut_M_real_2_0, align 4" [matmul.cpp:58]   --->   Operation 175 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 176 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 9" [matmul.cpp:58]   --->   Operation 176 'extractvalue' 'mulOut_M_real_2_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 177 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_2_1_r, float* @mulOut_M_real_2_1, align 4" [matmul.cpp:58]   --->   Operation 177 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 178 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 10" [matmul.cpp:58]   --->   Operation 178 'extractvalue' 'mulOut_M_real_2_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 179 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_2_2_r, float* @mulOut_M_real_2_2, align 4" [matmul.cpp:58]   --->   Operation 179 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 180 [1/1] (0.00ns)   --->   "%mulOut_M_real_2_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 11" [matmul.cpp:58]   --->   Operation 180 'extractvalue' 'mulOut_M_real_2_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 181 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_2_3_r, float* @mulOut_M_real_2_3, align 4" [matmul.cpp:58]   --->   Operation 181 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 182 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 12" [matmul.cpp:58]   --->   Operation 182 'extractvalue' 'mulOut_M_real_3_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 183 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_3_0_r, float* @mulOut_M_real_3_0, align 4" [matmul.cpp:58]   --->   Operation 183 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 184 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 13" [matmul.cpp:58]   --->   Operation 184 'extractvalue' 'mulOut_M_real_3_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 185 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_3_1_r, float* @mulOut_M_real_3_1, align 4" [matmul.cpp:58]   --->   Operation 185 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 186 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 14" [matmul.cpp:58]   --->   Operation 186 'extractvalue' 'mulOut_M_real_3_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 187 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_3_2_r, float* @mulOut_M_real_3_2, align 4" [matmul.cpp:58]   --->   Operation 187 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 188 [1/1] (0.00ns)   --->   "%mulOut_M_real_3_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 15" [matmul.cpp:58]   --->   Operation 188 'extractvalue' 'mulOut_M_real_3_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 189 [1/1] (0.00ns)   --->   "store float %mulOut_M_real_3_3_r, float* @mulOut_M_real_3_3, align 4" [matmul.cpp:58]   --->   Operation 189 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 190 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 16" [matmul.cpp:58]   --->   Operation 190 'extractvalue' 'mulOut_M_imag_0_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 191 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_0_0_r, float* @mulOut_M_imag_0_0, align 4" [matmul.cpp:58]   --->   Operation 191 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 192 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 17" [matmul.cpp:58]   --->   Operation 192 'extractvalue' 'mulOut_M_imag_0_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 193 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_0_1_r, float* @mulOut_M_imag_0_1, align 4" [matmul.cpp:58]   --->   Operation 193 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 194 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 18" [matmul.cpp:58]   --->   Operation 194 'extractvalue' 'mulOut_M_imag_0_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 195 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_0_2_r, float* @mulOut_M_imag_0_2, align 4" [matmul.cpp:58]   --->   Operation 195 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 196 [1/1] (0.00ns)   --->   "%mulOut_M_imag_0_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 19" [matmul.cpp:58]   --->   Operation 196 'extractvalue' 'mulOut_M_imag_0_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 197 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_0_3_r, float* @mulOut_M_imag_0_3, align 4" [matmul.cpp:58]   --->   Operation 197 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 198 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 20" [matmul.cpp:58]   --->   Operation 198 'extractvalue' 'mulOut_M_imag_1_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 199 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_1_0_r, float* @mulOut_M_imag_1_0, align 4" [matmul.cpp:58]   --->   Operation 199 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 200 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 21" [matmul.cpp:58]   --->   Operation 200 'extractvalue' 'mulOut_M_imag_1_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 201 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_1_1_r, float* @mulOut_M_imag_1_1, align 4" [matmul.cpp:58]   --->   Operation 201 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 202 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 22" [matmul.cpp:58]   --->   Operation 202 'extractvalue' 'mulOut_M_imag_1_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 203 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_1_2_r, float* @mulOut_M_imag_1_2, align 4" [matmul.cpp:58]   --->   Operation 203 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 204 [1/1] (0.00ns)   --->   "%mulOut_M_imag_1_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 23" [matmul.cpp:58]   --->   Operation 204 'extractvalue' 'mulOut_M_imag_1_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 205 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_1_3_r, float* @mulOut_M_imag_1_3, align 4" [matmul.cpp:58]   --->   Operation 205 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 206 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 24" [matmul.cpp:58]   --->   Operation 206 'extractvalue' 'mulOut_M_imag_2_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 207 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_2_0_r, float* @mulOut_M_imag_2_0, align 4" [matmul.cpp:58]   --->   Operation 207 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 208 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 25" [matmul.cpp:58]   --->   Operation 208 'extractvalue' 'mulOut_M_imag_2_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 209 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_2_1_r, float* @mulOut_M_imag_2_1, align 4" [matmul.cpp:58]   --->   Operation 209 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 210 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 26" [matmul.cpp:58]   --->   Operation 210 'extractvalue' 'mulOut_M_imag_2_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 211 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_2_2_r, float* @mulOut_M_imag_2_2, align 4" [matmul.cpp:58]   --->   Operation 211 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 212 [1/1] (0.00ns)   --->   "%mulOut_M_imag_2_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 27" [matmul.cpp:58]   --->   Operation 212 'extractvalue' 'mulOut_M_imag_2_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 213 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_2_3_r, float* @mulOut_M_imag_2_3, align 4" [matmul.cpp:58]   --->   Operation 213 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 214 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_0_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 28" [matmul.cpp:58]   --->   Operation 214 'extractvalue' 'mulOut_M_imag_3_0_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 215 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_3_0_r, float* @mulOut_M_imag_3_0, align 4" [matmul.cpp:58]   --->   Operation 215 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 216 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_1_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 29" [matmul.cpp:58]   --->   Operation 216 'extractvalue' 'mulOut_M_imag_3_1_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 217 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_3_1_r, float* @mulOut_M_imag_3_1, align 4" [matmul.cpp:58]   --->   Operation 217 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 218 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_2_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 30" [matmul.cpp:58]   --->   Operation 218 'extractvalue' 'mulOut_M_imag_3_2_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 219 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_3_2_r, float* @mulOut_M_imag_3_2, align 4" [matmul.cpp:58]   --->   Operation 219 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 220 [1/1] (0.00ns)   --->   "%mulOut_M_imag_3_3_r = extractvalue { float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float } %call_ret, 31" [matmul.cpp:58]   --->   Operation 220 'extractvalue' 'mulOut_M_imag_3_3_r' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 221 [1/1] (0.00ns)   --->   "store float %mulOut_M_imag_3_3_r, float* @mulOut_M_imag_3_3, align 4" [matmul.cpp:58]   --->   Operation 221 'store' <Predicate = true> <Delay = 0.00>
ST_6 : Operation 222 [1/1] (0.65ns)   --->   "br label %8" [matmul.cpp:62]   --->   Operation 222 'br' <Predicate = true> <Delay = 0.65>

State 7 <SV = 4> <Delay = 0.95>
ST_7 : Operation 223 [1/1] (0.00ns)   --->   "%i_2 = phi i5 [ 0, %7 ], [ %i_3, %loop_out1 ]"   --->   Operation 223 'phi' 'i_2' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 224 [1/1] (0.75ns)   --->   "%icmp_ln62 = icmp eq i5 %i_2, -16" [matmul.cpp:62]   --->   Operation 224 'icmp' 'icmp_ln62' <Predicate = true> <Delay = 0.75> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 225 [1/1] (0.00ns)   --->   "%empty_14 = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 16, i64 16, i64 16)"   --->   Operation 225 'speclooptripcount' 'empty_14' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 226 [1/1] (0.78ns)   --->   "%i_3 = add i5 %i_2, 1" [matmul.cpp:62]   --->   Operation 226 'add' 'i_3' <Predicate = true> <Delay = 0.78> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 0.77> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 227 [1/1] (0.00ns)   --->   "br i1 %icmp_ln62, label %9, label %loop_out1" [matmul.cpp:62]   --->   Operation 227 'br' <Predicate = true> <Delay = 0.00>
ST_7 : Operation 228 [1/1] (0.00ns)   --->   "%trunc_ln64 = trunc i5 %i_2 to i4" [matmul.cpp:64]   --->   Operation 228 'trunc' 'trunc_ln64' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_7 : Operation 229 [1/1] (0.00ns)   --->   "%zext_ln64 = zext i4 %trunc_ln64 to i5" [matmul.cpp:64]   --->   Operation 229 'zext' 'zext_ln64' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_7 : Operation 230 [1/1] (0.48ns)   --->   "%tmp_5 = call float @_ssdm_op_Mux.ap_auto.16float.i5(float %mulOut_M_real_0_0_r, float %mulOut_M_real_0_1_r, float %mulOut_M_real_0_2_r, float %mulOut_M_real_0_3_r, float %mulOut_M_real_1_0_r, float %mulOut_M_real_1_1_r, float %mulOut_M_real_1_2_r, float %mulOut_M_real_1_3_r, float %mulOut_M_real_2_0_r, float %mulOut_M_real_2_1_r, float %mulOut_M_real_2_2_r, float %mulOut_M_real_2_3_r, float %mulOut_M_real_3_0_r, float %mulOut_M_real_3_1_r, float %mulOut_M_real_3_2_r, float %mulOut_M_real_3_3_r, i5 %zext_ln64)" [matmul.cpp:64]   --->   Operation 230 'mux' 'tmp_5' <Predicate = (!icmp_ln62)> <Delay = 0.48> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 231 [1/1] (0.48ns)   --->   "%tmp_6 = call float @_ssdm_op_Mux.ap_auto.16float.i5(float %mulOut_M_imag_0_0_r, float %mulOut_M_imag_0_1_r, float %mulOut_M_imag_0_2_r, float %mulOut_M_imag_0_3_r, float %mulOut_M_imag_1_0_r, float %mulOut_M_imag_1_1_r, float %mulOut_M_imag_1_2_r, float %mulOut_M_imag_1_3_r, float %mulOut_M_imag_2_0_r, float %mulOut_M_imag_2_1_r, float %mulOut_M_imag_2_2_r, float %mulOut_M_imag_2_3_r, float %mulOut_M_imag_3_0_r, float %mulOut_M_imag_3_1_r, float %mulOut_M_imag_3_2_r, float %mulOut_M_imag_3_3_r, i5 %zext_ln64)" [matmul.cpp:67]   --->   Operation 231 'mux' 'tmp_6' <Predicate = (!icmp_ln62)> <Delay = 0.48> <Core = "MuxnS">   --->   Core 31 'MuxnS' <Latency = 0> <II = 1> <Delay = 0.48> <FuncUnit> <Opcode : 'mux'> <InPorts = 2> <OutPorts = 1>
ST_7 : Operation 232 [1/1] (0.75ns)   --->   "%valOut_last_V = icmp eq i5 %i_2, 15" [matmul.cpp:71]   --->   Operation 232 'icmp' 'valOut_last_V' <Predicate = (!icmp_ln62)> <Delay = 0.75> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 0.75> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>

State 8 <SV = 5> <Delay = 0.00>
ST_8 : Operation 233 [1/1] (0.00ns)   --->   "%bitcast_ln64 = bitcast float %tmp_5 to i32" [matmul.cpp:64]   --->   Operation 233 'bitcast' 'bitcast_ln64' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_8 : Operation 234 [1/1] (0.00ns)   --->   "%bitcast_ln67 = bitcast float %tmp_6 to i32" [matmul.cpp:67]   --->   Operation 234 'bitcast' 'bitcast_ln67' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_8 : Operation 235 [1/1] (0.00ns)   --->   "%p_Result_2 = call i64 @_ssdm_op_BitConcatenate.i64.i32.i32(i32 %bitcast_ln64, i32 %bitcast_ln67)" [matmul.cpp:68]   --->   Operation 235 'bitconcatenate' 'p_Result_2' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_8 : Operation 236 [2/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i8P.i1P(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i1* %out_stream_V_last_V, i64 %p_Result_2, i8 15, i8 -1, i1 %valOut_last_V)" [matmul.cpp:74]   --->   Operation 236 'write' <Predicate = (!icmp_ln62)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >

State 9 <SV = 6> <Delay = 0.00>
ST_9 : Operation 237 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecLoopName([10 x i8]* @p_str13) nounwind" [matmul.cpp:62]   --->   Operation 237 'specloopname' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_9 : Operation 238 [1/1] (0.00ns)   --->   "%tmp_2 = call i32 (...)* @_ssdm_op_SpecRegionBegin([10 x i8]* @p_str13)" [matmul.cpp:62]   --->   Operation 238 'specregionbegin' 'tmp_2' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_9 : Operation 239 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 -1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [matmul.cpp:63]   --->   Operation 239 'specpipeline' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_9 : Operation 240 [1/2] (0.00ns)   --->   "call void @_ssdm_op_Write.axis.volatile.i64P.i8P.i8P.i1P(i64* %out_stream_V_data_V, i8* %out_stream_V_keep_V, i8* %out_stream_V_strb_V, i1* %out_stream_V_last_V, i64 %p_Result_2, i8 15, i8 -1, i1 %valOut_last_V)" [matmul.cpp:74]   --->   Operation 240 'write' <Predicate = (!icmp_ln62)> <Delay = 0.00> <Core = "AXI4Stream">   --->   Core 5 'AXI4Stream' <Latency = 0> <II = 1> <Delay = 1.00> <Adapter> <Opcode : >
ST_9 : Operation 241 [1/1] (0.00ns)   --->   "%empty_15 = call i32 (...)* @_ssdm_op_SpecRegionEnd([10 x i8]* @p_str13, i32 %tmp_2)" [matmul.cpp:75]   --->   Operation 241 'specregionend' 'empty_15' <Predicate = (!icmp_ln62)> <Delay = 0.00>
ST_9 : Operation 242 [1/1] (0.00ns)   --->   "br label %8" [matmul.cpp:62]   --->   Operation 242 'br' <Predicate = (!icmp_ln62)> <Delay = 0.00>

State 10 <SV = 5> <Delay = 0.00>
ST_10 : Operation 243 [1/1] (0.00ns)   --->   "ret void" [matmul.cpp:76]   --->   Operation 243 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 0.656ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', matmul.cpp:34) [73]  (0.656 ns)

 <State 2>: 0.952ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln34', matmul.cpp:34) [74]  (0.753 ns)
	blocking operation 0.199 ns on control path)

 <State 3>: 1.24ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', matmul.cpp:35) [83]  (0 ns)
	'getelementptr' operation ('A_M_real_3_addr', matmul.cpp:38) [104]  (0 ns)
	'store' operation ('store_ln38', matmul.cpp:38) of variable '__val', matmul.cpp:38 on array 'A_M_real_3' [122]  (1.24 ns)

 <State 4>: 0.952ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln46', matmul.cpp:46) [134]  (0.753 ns)
	blocking operation 0.199 ns on control path)

 <State 5>: 2.01ns
The critical path consists of the following:
	'phi' operation ('j') with incoming values : ('j', matmul.cpp:47) [147]  (0 ns)
	'add' operation ('add_ln50', matmul.cpp:50) [158]  (0.773 ns)
	'getelementptr' operation ('B_M_real_2_addr', matmul.cpp:50) [166]  (0 ns)
	'store' operation ('store_ln50', matmul.cpp:50) of variable '__val', matmul.cpp:50 on array 'B_M_real_2' [173]  (1.24 ns)

 <State 6>: 0.656ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('i') with incoming values : ('i', matmul.cpp:62) [293]  (0.656 ns)

 <State 7>: 0.952ns
The critical path consists of the following:
	'icmp' operation ('icmp_ln62', matmul.cpp:62) [294]  (0.753 ns)
	blocking operation 0.199 ns on control path)

 <State 8>: 0ns
The critical path consists of the following:

 <State 9>: 0ns
The critical path consists of the following:

 <State 10>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
