// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "operator_mul_float.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic operator_mul_float::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic operator_mul_float::ap_const_logic_0 = sc_dt::Log_0;
const bool operator_mul_float::ap_const_boolean_1 = true;
const bool operator_mul_float::ap_const_boolean_0 = false;

operator_mul_float::operator_mul_float(sc_module_name name) : sc_module(name), mVcdFile(0) {
    matmul_fsub_32ns_bkb_U1 = new matmul_fsub_32ns_bkb<1,4,32,32,32>("matmul_fsub_32ns_bkb_U1");
    matmul_fsub_32ns_bkb_U1->clk(ap_clk);
    matmul_fsub_32ns_bkb_U1->reset(ap_rst);
    matmul_fsub_32ns_bkb_U1->din0(tmp_i_reg_104);
    matmul_fsub_32ns_bkb_U1->din1(tmp_2_i_reg_109);
    matmul_fsub_32ns_bkb_U1->ce(grp_fu_36_ce);
    matmul_fsub_32ns_bkb_U1->dout(grp_fu_36_p2);
    matmul_fadd_32ns_cud_U2 = new matmul_fadd_32ns_cud<1,4,32,32,32>("matmul_fadd_32ns_cud_U2");
    matmul_fadd_32ns_cud_U2->clk(ap_clk);
    matmul_fadd_32ns_cud_U2->reset(ap_rst);
    matmul_fadd_32ns_cud_U2->din0(tmp_4_i_reg_114);
    matmul_fadd_32ns_cud_U2->din1(tmp_5_i_reg_119);
    matmul_fadd_32ns_cud_U2->ce(grp_fu_40_ce);
    matmul_fadd_32ns_cud_U2->dout(grp_fu_40_p2);
    matmul_fmul_32ns_dEe_U3 = new matmul_fmul_32ns_dEe<1,2,32,32,32>("matmul_fmul_32ns_dEe_U3");
    matmul_fmul_32ns_dEe_U3->clk(ap_clk);
    matmul_fmul_32ns_dEe_U3->reset(ap_rst);
    matmul_fmul_32ns_dEe_U3->din0(p_x_M_real_read_int_reg);
    matmul_fmul_32ns_dEe_U3->din1(p_y_M_real_read_int_reg);
    matmul_fmul_32ns_dEe_U3->ce(grp_fu_44_ce);
    matmul_fmul_32ns_dEe_U3->dout(grp_fu_44_p2);
    matmul_fmul_32ns_dEe_U4 = new matmul_fmul_32ns_dEe<1,2,32,32,32>("matmul_fmul_32ns_dEe_U4");
    matmul_fmul_32ns_dEe_U4->clk(ap_clk);
    matmul_fmul_32ns_dEe_U4->reset(ap_rst);
    matmul_fmul_32ns_dEe_U4->din0(p_x_M_imag_read_int_reg);
    matmul_fmul_32ns_dEe_U4->din1(p_y_M_imag_read_int_reg);
    matmul_fmul_32ns_dEe_U4->ce(grp_fu_50_ce);
    matmul_fmul_32ns_dEe_U4->dout(grp_fu_50_p2);
    matmul_fmul_32ns_dEe_U5 = new matmul_fmul_32ns_dEe<1,2,32,32,32>("matmul_fmul_32ns_dEe_U5");
    matmul_fmul_32ns_dEe_U5->clk(ap_clk);
    matmul_fmul_32ns_dEe_U5->reset(ap_rst);
    matmul_fmul_32ns_dEe_U5->din0(p_x_M_imag_read_int_reg);
    matmul_fmul_32ns_dEe_U5->din1(p_y_M_real_read_int_reg);
    matmul_fmul_32ns_dEe_U5->ce(grp_fu_56_ce);
    matmul_fmul_32ns_dEe_U5->dout(grp_fu_56_p2);
    matmul_fmul_32ns_dEe_U6 = new matmul_fmul_32ns_dEe<1,2,32,32,32>("matmul_fmul_32ns_dEe_U6");
    matmul_fmul_32ns_dEe_U6->clk(ap_clk);
    matmul_fmul_32ns_dEe_U6->reset(ap_rst);
    matmul_fmul_32ns_dEe_U6->din0(p_x_M_real_read_int_reg);
    matmul_fmul_32ns_dEe_U6->din1(p_y_M_imag_read_int_reg);
    matmul_fmul_32ns_dEe_U6->ce(grp_fu_62_ce);
    matmul_fmul_32ns_dEe_U6->dout(grp_fu_62_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);

    SC_METHOD(thread_ap_block_state1_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state2_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter2);

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter3);

    SC_METHOD(thread_ap_block_state5_pp0_stage0_iter4);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter5);

    SC_METHOD(thread_ap_return_0);
    sensitive << ( grp_fu_36_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_0_int_reg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( grp_fu_40_p2 );
    sensitive << ( ap_ce_reg );
    sensitive << ( ap_return_1_int_reg );

    SC_METHOD(thread_grp_fu_36_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_40_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_44_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_50_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_56_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    SC_METHOD(thread_grp_fu_62_ce);
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_ce_reg );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "operator_mul_float_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, p_x_M_real_read, "(port)p_x_M_real_read");
    sc_trace(mVcdFile, p_x_M_imag_read, "(port)p_x_M_imag_read");
    sc_trace(mVcdFile, p_y_M_real_read, "(port)p_y_M_real_read");
    sc_trace(mVcdFile, p_y_M_imag_read, "(port)p_y_M_imag_read");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
    sc_trace(mVcdFile, ap_ce, "(port)ap_ce");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_block_state1_pp0_stage0_iter0, "ap_block_state1_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state2_pp0_stage0_iter1, "ap_block_state2_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter2, "ap_block_state3_pp0_stage0_iter2");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter3, "ap_block_state4_pp0_stage0_iter3");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage0_iter4, "ap_block_state5_pp0_stage0_iter4");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter5, "ap_block_state6_pp0_stage0_iter5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, grp_fu_44_p2, "grp_fu_44_p2");
    sc_trace(mVcdFile, tmp_i_reg_104, "tmp_i_reg_104");
    sc_trace(mVcdFile, grp_fu_50_p2, "grp_fu_50_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_109, "tmp_2_i_reg_109");
    sc_trace(mVcdFile, grp_fu_56_p2, "grp_fu_56_p2");
    sc_trace(mVcdFile, tmp_4_i_reg_114, "tmp_4_i_reg_114");
    sc_trace(mVcdFile, grp_fu_62_p2, "grp_fu_62_p2");
    sc_trace(mVcdFile, tmp_5_i_reg_119, "tmp_5_i_reg_119");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, grp_fu_36_p2, "grp_fu_36_p2");
    sc_trace(mVcdFile, grp_fu_40_p2, "grp_fu_40_p2");
    sc_trace(mVcdFile, grp_fu_36_ce, "grp_fu_36_ce");
    sc_trace(mVcdFile, grp_fu_40_ce, "grp_fu_40_ce");
    sc_trace(mVcdFile, grp_fu_44_ce, "grp_fu_44_ce");
    sc_trace(mVcdFile, grp_fu_50_ce, "grp_fu_50_ce");
    sc_trace(mVcdFile, grp_fu_56_ce, "grp_fu_56_ce");
    sc_trace(mVcdFile, grp_fu_62_ce, "grp_fu_62_ce");
    sc_trace(mVcdFile, ap_ce_reg, "ap_ce_reg");
    sc_trace(mVcdFile, p_x_M_real_read_int_reg, "p_x_M_real_read_int_reg");
    sc_trace(mVcdFile, p_x_M_imag_read_int_reg, "p_x_M_imag_read_int_reg");
    sc_trace(mVcdFile, p_y_M_real_read_int_reg, "p_y_M_real_read_int_reg");
    sc_trace(mVcdFile, p_y_M_imag_read_int_reg, "p_y_M_imag_read_int_reg");
    sc_trace(mVcdFile, ap_return_0_int_reg, "ap_return_0_int_reg");
    sc_trace(mVcdFile, ap_return_1_int_reg, "ap_return_1_int_reg");
#endif

    }
}

operator_mul_float::~operator_mul_float() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete matmul_fsub_32ns_bkb_U1;
    delete matmul_fadd_32ns_cud_U2;
    delete matmul_fmul_32ns_dEe_U3;
    delete matmul_fmul_32ns_dEe_U4;
    delete matmul_fmul_32ns_dEe_U5;
    delete matmul_fmul_32ns_dEe_U6;
}

void operator_mul_float::thread_ap_clk_no_reset_() {
    ap_ce_reg = ap_ce.read();
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_0_int_reg = grp_fu_36_p2.read();
        ap_return_1_int_reg = grp_fu_40_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce.read())) {
        p_x_M_imag_read_int_reg = p_x_M_imag_read.read();
        p_x_M_real_read_int_reg = p_x_M_real_read.read();
        p_y_M_imag_read_int_reg = p_y_M_imag_read.read();
        p_y_M_real_read_int_reg = p_y_M_real_read.read();
    }
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_ce_reg.read(), ap_const_logic_1))) {
        tmp_2_i_reg_109 = grp_fu_50_p2.read();
        tmp_4_i_reg_114 = grp_fu_56_p2.read();
        tmp_5_i_reg_119 = grp_fu_62_p2.read();
        tmp_i_reg_104 = grp_fu_44_p2.read();
    }
}

void operator_mul_float::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_state1_pp0_stage0_iter0() {
    ap_block_state1_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_state2_pp0_stage0_iter1() {
    ap_block_state2_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_state3_pp0_stage0_iter2() {
    ap_block_state3_pp0_stage0_iter2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_state4_pp0_stage0_iter3() {
    ap_block_state4_pp0_stage0_iter3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_state5_pp0_stage0_iter4() {
    ap_block_state5_pp0_stage0_iter4 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_block_state6_pp0_stage0_iter5() {
    ap_block_state6_pp0_stage0_iter5 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void operator_mul_float::thread_ap_return_0() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_0 = ap_return_0_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_0 = grp_fu_36_p2.read();
    }
}

void operator_mul_float::thread_ap_return_1() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_ce_reg.read())) {
        ap_return_1 = ap_return_1_int_reg.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read())) {
        ap_return_1 = grp_fu_40_p2.read();
    }
}

void operator_mul_float::thread_grp_fu_36_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_36_ce = ap_const_logic_1;
    } else {
        grp_fu_36_ce = ap_const_logic_0;
    }
}

void operator_mul_float::thread_grp_fu_40_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_40_ce = ap_const_logic_1;
    } else {
        grp_fu_40_ce = ap_const_logic_0;
    }
}

void operator_mul_float::thread_grp_fu_44_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_44_ce = ap_const_logic_1;
    } else {
        grp_fu_44_ce = ap_const_logic_0;
    }
}

void operator_mul_float::thread_grp_fu_50_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_50_ce = ap_const_logic_1;
    } else {
        grp_fu_50_ce = ap_const_logic_0;
    }
}

void operator_mul_float::thread_grp_fu_56_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_56_ce = ap_const_logic_1;
    } else {
        grp_fu_56_ce = ap_const_logic_0;
    }
}

void operator_mul_float::thread_grp_fu_62_ce() {
    if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_ce_reg.read()))) {
        grp_fu_62_ce = ap_const_logic_1;
    } else {
        grp_fu_62_ce = ap_const_logic_0;
    }
}

}

