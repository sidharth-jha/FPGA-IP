// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module operator_mul_float (
        ap_clk,
        ap_rst,
        p_x_M_real_read,
        p_x_M_imag_read,
        p_y_M_real_read,
        p_y_M_imag_read,
        ap_return_0,
        ap_return_1,
        ap_ce
);


input   ap_clk;
input   ap_rst;
input  [31:0] p_x_M_real_read;
input  [31:0] p_x_M_imag_read;
input  [31:0] p_y_M_real_read;
input  [31:0] p_y_M_imag_read;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;
input   ap_ce;

reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] grp_fu_44_p2;
reg   [31:0] tmp_i_reg_104;
wire   [31:0] grp_fu_50_p2;
reg   [31:0] tmp_2_i_reg_109;
wire   [31:0] grp_fu_56_p2;
reg   [31:0] tmp_4_i_reg_114;
wire   [31:0] grp_fu_62_p2;
reg   [31:0] tmp_5_i_reg_119;
wire    ap_block_pp0_stage0;
wire   [31:0] grp_fu_36_p2;
wire   [31:0] grp_fu_40_p2;
reg    grp_fu_36_ce;
reg    grp_fu_40_ce;
reg    grp_fu_44_ce;
reg    grp_fu_50_ce;
reg    grp_fu_56_ce;
reg    grp_fu_62_ce;
reg    ap_ce_reg;
reg   [31:0] p_x_M_real_read_int_reg;
reg   [31:0] p_x_M_imag_read_int_reg;
reg   [31:0] p_y_M_real_read_int_reg;
reg   [31:0] p_y_M_imag_read_int_reg;
reg   [31:0] ap_return_0_int_reg;
reg   [31:0] ap_return_1_int_reg;

matmul_fsub_32ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_fsub_32ns_bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_i_reg_104),
    .din1(tmp_2_i_reg_109),
    .ce(grp_fu_36_ce),
    .dout(grp_fu_36_p2)
);

matmul_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_fadd_32ns_cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_i_reg_114),
    .din1(tmp_5_i_reg_119),
    .ce(grp_fu_40_ce),
    .dout(grp_fu_40_p2)
);

matmul_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_fmul_32ns_dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_M_real_read_int_reg),
    .din1(p_y_M_real_read_int_reg),
    .ce(grp_fu_44_ce),
    .dout(grp_fu_44_p2)
);

matmul_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_fmul_32ns_dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_M_imag_read_int_reg),
    .din1(p_y_M_imag_read_int_reg),
    .ce(grp_fu_50_ce),
    .dout(grp_fu_50_p2)
);

matmul_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_fmul_32ns_dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_M_imag_read_int_reg),
    .din1(p_y_M_real_read_int_reg),
    .ce(grp_fu_56_ce),
    .dout(grp_fu_56_p2)
);

matmul_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
matmul_fmul_32ns_dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(p_x_M_real_read_int_reg),
    .din1(p_y_M_imag_read_int_reg),
    .ce(grp_fu_62_ce),
    .dout(grp_fu_62_p2)
);

always @ (posedge ap_clk) begin
    ap_ce_reg <= ap_ce;
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce_reg)) begin
        ap_return_0_int_reg <= grp_fu_36_p2;
        ap_return_1_int_reg <= grp_fu_40_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_ce)) begin
        p_x_M_imag_read_int_reg <= p_x_M_imag_read;
        p_x_M_real_read_int_reg <= p_x_M_real_read;
        p_y_M_imag_read_int_reg <= p_y_M_imag_read;
        p_y_M_real_read_int_reg <= p_y_M_real_read;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        tmp_2_i_reg_109 <= grp_fu_50_p2;
        tmp_4_i_reg_114 <= grp_fu_56_p2;
        tmp_5_i_reg_119 <= grp_fu_62_p2;
        tmp_i_reg_104 <= grp_fu_44_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_0 = ap_return_0_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_0 = grp_fu_36_p2;
    end
end

always @ (*) begin
    if ((1'b0 == ap_ce_reg)) begin
        ap_return_1 = ap_return_1_int_reg;
    end else if ((1'b1 == ap_ce_reg)) begin
        ap_return_1 = grp_fu_40_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_36_ce = 1'b1;
    end else begin
        grp_fu_36_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_40_ce = 1'b1;
    end else begin
        grp_fu_40_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_44_ce = 1'b1;
    end else begin
        grp_fu_44_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_50_ce = 1'b1;
    end else begin
        grp_fu_50_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_56_ce = 1'b1;
    end else begin
        grp_fu_56_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce_reg))) begin
        grp_fu_62_ce = 1'b1;
    end else begin
        grp_fu_62_ce = 1'b0;
    end
end

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

endmodule //operator_mul_float
