-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DopplerDelay is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    rxmat_M_real_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_2_ce0 : OUT STD_LOGIC;
    rxmat_M_real_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_2_ce1 : OUT STD_LOGIC;
    rxmat_M_real_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_21_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_21_ce0 : OUT STD_LOGIC;
    rxmat_M_real_21_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_21_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_21_ce1 : OUT STD_LOGIC;
    rxmat_M_real_21_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_22_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_22_ce0 : OUT STD_LOGIC;
    rxmat_M_real_22_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_22_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_22_ce1 : OUT STD_LOGIC;
    rxmat_M_real_22_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_23_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_23_ce0 : OUT STD_LOGIC;
    rxmat_M_real_23_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_real_23_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_real_23_ce1 : OUT STD_LOGIC;
    rxmat_M_real_23_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_2_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_2_ce0 : OUT STD_LOGIC;
    rxmat_M_imag_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_2_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_2_ce1 : OUT STD_LOGIC;
    rxmat_M_imag_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_24_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_24_ce0 : OUT STD_LOGIC;
    rxmat_M_imag_24_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_24_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_24_ce1 : OUT STD_LOGIC;
    rxmat_M_imag_24_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_25_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_25_ce0 : OUT STD_LOGIC;
    rxmat_M_imag_25_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_25_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_25_ce1 : OUT STD_LOGIC;
    rxmat_M_imag_25_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_26_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_26_ce0 : OUT STD_LOGIC;
    rxmat_M_imag_26_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_M_imag_26_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    rxmat_M_imag_26_ce1 : OUT STD_LOGIC;
    rxmat_M_imag_26_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_s_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_s_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_s_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_s_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_s_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_s_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_1_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_1_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_1_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_1_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_1_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_2_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_2_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_2_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_2_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_2_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_3_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_3_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_3_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_3_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_3_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_4_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_4_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_4_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_4_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_4_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_5_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_5_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_5_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_5_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_5_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_6_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_6_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_6_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_6_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_6_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_real_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_real_7_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_real_7_we0 : OUT STD_LOGIC;
    rxmat_delay_M_real_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    rxmat_delay_M_imag_7_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    rxmat_delay_M_imag_7_ce0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_7_we0 : OUT STD_LOGIC;
    rxmat_delay_M_imag_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of DopplerDelay is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_40466666 : STD_LOGIC_VECTOR (31 downto 0) := "01000000010001100110011001100110";
    constant ap_const_lv32_40A75C29 : STD_LOGIC_VECTOR (31 downto 0) := "01000000101001110101110000101001";
    constant ap_const_lv32_40C3851F : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000111000010100011111";
    constant ap_const_lv32_411FAE14 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000111111010111000010100";
    constant ap_const_lv32_41035C29 : STD_LOGIC_VECTOR (31 downto 0) := "01000001000000110101110000101001";
    constant ap_const_lv32_3E051EB8 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000001010001111010111000";
    constant ap_const_lv32_40E3851F : STD_LOGIC_VECTOR (31 downto 0) := "01000000111000111000010100011111";
    constant ap_const_lv32_407EB852 : STD_LOGIC_VECTOR (31 downto 0) := "01000000011111101011100001010010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv58_0 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_510 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_510_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_0_reg_510_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_510_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_510_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_510_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_reg_510_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_836_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_768_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_840 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_r_M_real_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal p_r_M_imag_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_1_reg_937 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_1_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_2_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_2_reg_955 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_3_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_3_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_4_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_4_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_5_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_5_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_6_reg_997 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_6_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_real_7_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_r_M_imag_7_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_602_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_reg_1021 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_607_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_612_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_617_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i_38_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_622_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i2_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i4_reg_1051 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_637_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i5_reg_1056 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i9_reg_1061 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_647_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i1_reg_1066 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i1_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i1_39_reg_1076 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i2_reg_1081 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_667_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i3_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i2_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_677_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i2_40_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i3_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_687_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i4_reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i3_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_697_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i3_41_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i4_reg_1121 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_707_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i5_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_712_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i5_reg_1131 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i4_42_reg_1136 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i5_43_reg_1141 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i6_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_732_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i6_reg_1151 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i6_reg_1156 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_742_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i6_44_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_747_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_i_i7_reg_1166 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_752_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_i_i7_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_i7_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_phi_mux_i_0_phi_fu_514_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln19_1_fu_782_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_fu_800_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_522_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_542_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_547_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_552_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_557_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_562_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_567_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_572_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_577_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_582_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_587_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_592_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_597_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_774_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln19_fu_794_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component matmul_fsub_32ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_fadd_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_fmul_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    matmul_fsub_32ns_bkb_U1 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i_reg_1021,
        din1 => tmp_7_i_i_reg_1026,
        ce => ap_const_logic_1,
        dout => grp_fu_522_p2);

    matmul_fadd_32ns_cud_U2 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i_reg_1031,
        din1 => tmp_i_i_38_reg_1036,
        ce => ap_const_logic_1,
        dout => grp_fu_527_p2);

    matmul_fsub_32ns_bkb_U3 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i1_reg_1041,
        din1 => tmp_7_i_i2_reg_1046,
        ce => ap_const_logic_1,
        dout => grp_fu_532_p2);

    matmul_fadd_32ns_cud_U4 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i4_reg_1051,
        din1 => tmp_i_i5_reg_1056,
        ce => ap_const_logic_1,
        dout => grp_fu_537_p2);

    matmul_fsub_32ns_bkb_U5 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i9_reg_1061,
        din1 => tmp_7_i_i1_reg_1066,
        ce => ap_const_logic_1,
        dout => grp_fu_542_p2);

    matmul_fadd_32ns_cud_U6 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i1_reg_1071,
        din1 => tmp_i_i1_39_reg_1076,
        ce => ap_const_logic_1,
        dout => grp_fu_547_p2);

    matmul_fsub_32ns_bkb_U7 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i2_reg_1081,
        din1 => tmp_7_i_i3_reg_1086,
        ce => ap_const_logic_1,
        dout => grp_fu_552_p2);

    matmul_fadd_32ns_cud_U8 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i2_reg_1091,
        din1 => tmp_i_i2_40_reg_1096,
        ce => ap_const_logic_1,
        dout => grp_fu_557_p2);

    matmul_fsub_32ns_bkb_U9 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i3_reg_1101,
        din1 => tmp_7_i_i4_reg_1106,
        ce => ap_const_logic_1,
        dout => grp_fu_562_p2);

    matmul_fadd_32ns_cud_U10 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i3_reg_1111,
        din1 => tmp_i_i3_41_reg_1116,
        ce => ap_const_logic_1,
        dout => grp_fu_567_p2);

    matmul_fsub_32ns_bkb_U11 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i4_reg_1121,
        din1 => tmp_7_i_i5_reg_1126,
        ce => ap_const_logic_1,
        dout => grp_fu_572_p2);

    matmul_fadd_32ns_cud_U12 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i5_reg_1131,
        din1 => tmp_i_i4_42_reg_1136,
        ce => ap_const_logic_1,
        dout => grp_fu_577_p2);

    matmul_fsub_32ns_bkb_U13 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i5_43_reg_1141,
        din1 => tmp_7_i_i6_reg_1146,
        ce => ap_const_logic_1,
        dout => grp_fu_582_p2);

    matmul_fadd_32ns_cud_U14 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i6_reg_1151,
        din1 => tmp_i_i6_reg_1156,
        ce => ap_const_logic_1,
        dout => grp_fu_587_p2);

    matmul_fsub_32ns_bkb_U15 : component matmul_fsub_32ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_i6_44_reg_1161,
        din1 => tmp_7_i_i7_reg_1166,
        ce => ap_const_logic_1,
        dout => grp_fu_592_p2);

    matmul_fadd_32ns_cud_U16 : component matmul_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_9_i_i7_reg_1171,
        din1 => tmp_i_i7_reg_1176,
        ce => ap_const_logic_1,
        dout => grp_fu_597_p2);

    matmul_fmul_32ns_dEe_U17 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_925,
        din1 => ap_const_lv32_40466666,
        ce => ap_const_logic_1,
        dout => grp_fu_602_p2);

    matmul_fmul_32ns_dEe_U18 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_931,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_607_p2);

    matmul_fmul_32ns_dEe_U19 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_reg_931,
        din1 => ap_const_lv32_40466666,
        ce => ap_const_logic_1,
        dout => grp_fu_612_p2);

    matmul_fmul_32ns_dEe_U20 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_reg_925,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_617_p2);

    matmul_fmul_32ns_dEe_U21 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_1_reg_937,
        din1 => ap_const_lv32_40A75C29,
        ce => ap_const_logic_1,
        dout => grp_fu_622_p2);

    matmul_fmul_32ns_dEe_U22 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_1_reg_943,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_627_p2);

    matmul_fmul_32ns_dEe_U23 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_1_reg_943,
        din1 => ap_const_lv32_40A75C29,
        ce => ap_const_logic_1,
        dout => grp_fu_632_p2);

    matmul_fmul_32ns_dEe_U24 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_1_reg_937,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_637_p2);

    matmul_fmul_32ns_dEe_U25 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_2_reg_949,
        din1 => ap_const_lv32_40C3851F,
        ce => ap_const_logic_1,
        dout => grp_fu_642_p2);

    matmul_fmul_32ns_dEe_U26 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_2_reg_955,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_647_p2);

    matmul_fmul_32ns_dEe_U27 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_2_reg_955,
        din1 => ap_const_lv32_40C3851F,
        ce => ap_const_logic_1,
        dout => grp_fu_652_p2);

    matmul_fmul_32ns_dEe_U28 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_2_reg_949,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p2);

    matmul_fmul_32ns_dEe_U29 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_3_reg_961,
        din1 => ap_const_lv32_411FAE14,
        ce => ap_const_logic_1,
        dout => grp_fu_662_p2);

    matmul_fmul_32ns_dEe_U30 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_3_reg_967,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_667_p2);

    matmul_fmul_32ns_dEe_U31 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_3_reg_967,
        din1 => ap_const_lv32_411FAE14,
        ce => ap_const_logic_1,
        dout => grp_fu_672_p2);

    matmul_fmul_32ns_dEe_U32 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_3_reg_961,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_677_p2);

    matmul_fmul_32ns_dEe_U33 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_4_reg_973,
        din1 => ap_const_lv32_41035C29,
        ce => ap_const_logic_1,
        dout => grp_fu_682_p2);

    matmul_fmul_32ns_dEe_U34 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_4_reg_979,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_687_p2);

    matmul_fmul_32ns_dEe_U35 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_4_reg_979,
        din1 => ap_const_lv32_41035C29,
        ce => ap_const_logic_1,
        dout => grp_fu_692_p2);

    matmul_fmul_32ns_dEe_U36 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_4_reg_973,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_697_p2);

    matmul_fmul_32ns_dEe_U37 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_5_reg_985,
        din1 => ap_const_lv32_3E051EB8,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p2);

    matmul_fmul_32ns_dEe_U38 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_5_reg_991,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_707_p2);

    matmul_fmul_32ns_dEe_U39 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_5_reg_991,
        din1 => ap_const_lv32_3E051EB8,
        ce => ap_const_logic_1,
        dout => grp_fu_712_p2);

    matmul_fmul_32ns_dEe_U40 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_5_reg_985,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_717_p2);

    matmul_fmul_32ns_dEe_U41 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_6_reg_997,
        din1 => ap_const_lv32_40E3851F,
        ce => ap_const_logic_1,
        dout => grp_fu_722_p2);

    matmul_fmul_32ns_dEe_U42 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_6_reg_1003,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_727_p2);

    matmul_fmul_32ns_dEe_U43 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_6_reg_1003,
        din1 => ap_const_lv32_40E3851F,
        ce => ap_const_logic_1,
        dout => grp_fu_732_p2);

    matmul_fmul_32ns_dEe_U44 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_6_reg_997,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_737_p2);

    matmul_fmul_32ns_dEe_U45 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_7_reg_1009,
        din1 => ap_const_lv32_407EB852,
        ce => ap_const_logic_1,
        dout => grp_fu_742_p2);

    matmul_fmul_32ns_dEe_U46 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_7_reg_1015,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_747_p2);

    matmul_fmul_32ns_dEe_U47 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_imag_7_reg_1015,
        din1 => ap_const_lv32_407EB852,
        ce => ap_const_logic_1,
        dout => grp_fu_752_p2);

    matmul_fmul_32ns_dEe_U48 : component matmul_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => p_r_M_real_7_reg_1009,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        dout => grp_fu_757_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_510 <= i_reg_840;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_510 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_0_reg_510_pp0_iter1_reg <= i_0_reg_510;
                icmp_ln16_reg_836 <= icmp_ln16_fu_762_p2;
                icmp_ln16_reg_836_pp0_iter1_reg <= icmp_ln16_reg_836;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                i_0_reg_510_pp0_iter2_reg <= i_0_reg_510_pp0_iter1_reg;
                i_0_reg_510_pp0_iter3_reg <= i_0_reg_510_pp0_iter2_reg;
                i_0_reg_510_pp0_iter4_reg <= i_0_reg_510_pp0_iter3_reg;
                i_0_reg_510_pp0_iter5_reg <= i_0_reg_510_pp0_iter4_reg;
                i_0_reg_510_pp0_iter6_reg <= i_0_reg_510_pp0_iter5_reg;
                icmp_ln16_reg_836_pp0_iter2_reg <= icmp_ln16_reg_836_pp0_iter1_reg;
                icmp_ln16_reg_836_pp0_iter3_reg <= icmp_ln16_reg_836_pp0_iter2_reg;
                icmp_ln16_reg_836_pp0_iter4_reg <= icmp_ln16_reg_836_pp0_iter3_reg;
                icmp_ln16_reg_836_pp0_iter5_reg <= icmp_ln16_reg_836_pp0_iter4_reg;
                icmp_ln16_reg_836_pp0_iter6_reg <= icmp_ln16_reg_836_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_reg_840 <= i_fu_768_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_836 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_r_M_imag_1_reg_943 <= rxmat_M_imag_2_q1;
                p_r_M_imag_2_reg_955 <= rxmat_M_imag_24_q0;
                p_r_M_imag_3_reg_967 <= rxmat_M_imag_24_q1;
                p_r_M_imag_4_reg_979 <= rxmat_M_imag_25_q0;
                p_r_M_imag_5_reg_991 <= rxmat_M_imag_25_q1;
                p_r_M_imag_6_reg_1003 <= rxmat_M_imag_26_q0;
                p_r_M_imag_7_reg_1015 <= rxmat_M_imag_26_q1;
                p_r_M_imag_reg_931 <= rxmat_M_imag_2_q0;
                p_r_M_real_1_reg_937 <= rxmat_M_real_2_q1;
                p_r_M_real_2_reg_949 <= rxmat_M_real_21_q0;
                p_r_M_real_3_reg_961 <= rxmat_M_real_21_q1;
                p_r_M_real_4_reg_973 <= rxmat_M_real_22_q0;
                p_r_M_real_5_reg_985 <= rxmat_M_real_22_q1;
                p_r_M_real_6_reg_997 <= rxmat_M_real_23_q0;
                p_r_M_real_7_reg_1009 <= rxmat_M_real_23_q1;
                p_r_M_real_reg_925 <= rxmat_M_real_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_reg_836_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_7_i_i1_reg_1066 <= grp_fu_647_p2;
                tmp_7_i_i2_reg_1046 <= grp_fu_627_p2;
                tmp_7_i_i3_reg_1086 <= grp_fu_667_p2;
                tmp_7_i_i4_reg_1106 <= grp_fu_687_p2;
                tmp_7_i_i5_reg_1126 <= grp_fu_707_p2;
                tmp_7_i_i6_reg_1146 <= grp_fu_727_p2;
                tmp_7_i_i7_reg_1166 <= grp_fu_747_p2;
                tmp_7_i_i_reg_1026 <= grp_fu_607_p2;
                tmp_9_i_i1_reg_1071 <= grp_fu_652_p2;
                tmp_9_i_i2_reg_1091 <= grp_fu_672_p2;
                tmp_9_i_i3_reg_1111 <= grp_fu_692_p2;
                tmp_9_i_i4_reg_1051 <= grp_fu_632_p2;
                tmp_9_i_i5_reg_1131 <= grp_fu_712_p2;
                tmp_9_i_i6_reg_1151 <= grp_fu_732_p2;
                tmp_9_i_i7_reg_1171 <= grp_fu_752_p2;
                tmp_9_i_i_reg_1031 <= grp_fu_612_p2;
                tmp_i_i1_39_reg_1076 <= grp_fu_657_p2;
                tmp_i_i1_reg_1041 <= grp_fu_622_p2;
                tmp_i_i2_40_reg_1096 <= grp_fu_677_p2;
                tmp_i_i2_reg_1081 <= grp_fu_662_p2;
                tmp_i_i3_41_reg_1116 <= grp_fu_697_p2;
                tmp_i_i3_reg_1101 <= grp_fu_682_p2;
                tmp_i_i4_42_reg_1136 <= grp_fu_717_p2;
                tmp_i_i4_reg_1121 <= grp_fu_702_p2;
                tmp_i_i5_43_reg_1141 <= grp_fu_722_p2;
                tmp_i_i5_reg_1056 <= grp_fu_637_p2;
                tmp_i_i6_44_reg_1161 <= grp_fu_742_p2;
                tmp_i_i6_reg_1156 <= grp_fu_737_p2;
                tmp_i_i7_reg_1176 <= grp_fu_757_p2;
                tmp_i_i9_reg_1061 <= grp_fu_642_p2;
                tmp_i_i_38_reg_1036 <= grp_fu_617_p2;
                tmp_i_i_reg_1021 <= grp_fu_602_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln16_fu_762_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln16_fu_762_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln16_fu_762_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln16_fu_762_p2)
    begin
        if ((icmp_ln16_fu_762_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_0_phi_fu_514_p4_assign_proc : process(i_0_reg_510, ap_CS_fsm_pp0_stage0, icmp_ln16_reg_836, i_reg_840, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln16_reg_836 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_0_phi_fu_514_p4 <= i_reg_840;
        else 
            ap_phi_mux_i_0_phi_fu_514_p4 <= i_0_reg_510;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_768_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_0_phi_fu_514_p4) + unsigned(ap_const_lv5_1));
    icmp_ln16_fu_762_p2 <= "1" when (ap_phi_mux_i_0_phi_fu_514_p4 = ap_const_lv5_10) else "0";
    or_ln19_fu_794_p2 <= (tmp_8_fu_774_p3 or ap_const_lv6_1);
    rxmat_M_imag_24_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_imag_24_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_imag_24_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_24_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_imag_24_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_imag_24_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_24_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_imag_24_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_imag_25_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_imag_25_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_imag_25_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_25_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_imag_25_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_imag_25_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_25_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_imag_25_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_imag_26_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_imag_26_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_imag_26_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_26_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_imag_26_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_imag_26_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_26_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_imag_26_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_imag_2_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_imag_2_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_imag_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_2_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_imag_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_imag_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_imag_2_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_imag_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_real_21_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_real_21_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_real_21_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_21_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_real_21_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_real_21_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_21_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_real_21_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_real_22_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_real_22_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_real_22_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_22_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_real_22_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_real_22_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_22_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_real_22_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_real_23_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_real_23_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_real_23_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_23_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_real_23_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_real_23_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_23_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_real_23_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_M_real_2_address0 <= zext_ln19_1_fu_782_p1(5 - 1 downto 0);
    rxmat_M_real_2_address1 <= tmp_9_fu_800_p3(5 - 1 downto 0);

    rxmat_M_real_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_2_ce0 <= ap_const_logic_1;
        else 
            rxmat_M_real_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    rxmat_M_real_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            rxmat_M_real_2_ce1 <= ap_const_logic_1;
        else 
            rxmat_M_real_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_1_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_1_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_1_d0 <= grp_fu_537_p2;

    rxmat_delay_M_imag_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_1_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_2_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_2_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_2_d0 <= grp_fu_547_p2;

    rxmat_delay_M_imag_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_2_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_3_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_3_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_3_d0 <= grp_fu_557_p2;

    rxmat_delay_M_imag_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_3_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_4_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_4_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_4_d0 <= grp_fu_567_p2;

    rxmat_delay_M_imag_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_4_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_5_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_5_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_5_d0 <= grp_fu_577_p2;

    rxmat_delay_M_imag_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_5_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_6_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_6_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_6_d0 <= grp_fu_587_p2;

    rxmat_delay_M_imag_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_6_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_7_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_7_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_7_d0 <= grp_fu_597_p2;

    rxmat_delay_M_imag_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_7_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_s_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_imag_s_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_s_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_imag_s_d0 <= grp_fu_527_p2;

    rxmat_delay_M_imag_s_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_imag_s_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_imag_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_1_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_1_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_1_d0 <= grp_fu_532_p2;

    rxmat_delay_M_real_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_1_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_2_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_2_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_2_d0 <= grp_fu_542_p2;

    rxmat_delay_M_real_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_2_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_3_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_3_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_3_d0 <= grp_fu_552_p2;

    rxmat_delay_M_real_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_3_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_4_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_4_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_4_d0 <= grp_fu_562_p2;

    rxmat_delay_M_real_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_4_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_5_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_5_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_5_d0 <= grp_fu_572_p2;

    rxmat_delay_M_real_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_5_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_6_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_6_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_6_d0 <= grp_fu_582_p2;

    rxmat_delay_M_real_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_6_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_7_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_7_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_7_d0 <= grp_fu_592_p2;

    rxmat_delay_M_real_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_7_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_s_address0 <= zext_ln19_fu_816_p1(4 - 1 downto 0);

    rxmat_delay_M_real_s_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_s_ce0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    rxmat_delay_M_real_s_d0 <= grp_fu_522_p2;

    rxmat_delay_M_real_s_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln16_reg_836_pp0_iter6_reg, ap_enable_reg_pp0_iter7)
    begin
        if (((icmp_ln16_reg_836_pp0_iter6_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1))) then 
            rxmat_delay_M_real_s_we0 <= ap_const_logic_1;
        else 
            rxmat_delay_M_real_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_8_fu_774_p3 <= (ap_phi_mux_i_0_phi_fu_514_p4 & ap_const_lv1_0);
    tmp_9_fu_800_p3 <= (ap_const_lv58_0 & or_ln19_fu_794_p2);
    zext_ln19_1_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_774_p3),64));
    zext_ln19_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_510_pp0_iter6_reg),64));
end behav;
